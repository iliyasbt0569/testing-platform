import Test from '../testClass.js';

const tests = [
    new Test(
      `Мәліметтер қоры (МҚ) дегеніміз не?`, 
      `Мәліметтерді құрылымдап сақтау үшін қолданылатын деректер жиыны болып табылады`, 
      [
        `Компьютерде ойын бағдарламасын іске қосу үшін пайдаланылатын қосымша болып табылады`,
        `Әртүрлі дыбыстық файлдарды өңдеу үшін қолданылатын дыбыс редакторы ретінде қызмет етеді`,
        `Компьютерлік вирустарды анықтау және жою үшін қолданылатын антивирус жүйесі болып саналады`,
        `Құрылғылардың жұмысын басқару үшін орнатылатын жүйелік драйвер ретінде пайдаланылады`
      ],
    ),
    new Test(
      `SQL дегеніміз не?`, 
      `Мәліметтер қорын басқару және сұраныстар орындау үшін қолданылатын  тіл`, 
      [
        `Хат алмасуды ұйымдастыру үшін қолданылатын электрондық пошта қызметі болып табылады`,
        `Бағдарламалау және код жазу үшін пайдаланылатын  бағдарламалау IDE түрі болып саналады`,
        `Компьютерлік ойындарды жасау үшін қолданылатын ойын қозғалтқышы ретінде пайдаланылады`,
        `Мәліметтерді сақтау үшін қолданылатын қарапайым кесте қосымшасы ретінде қызмет етеді`
      ],
    ),
    new Test(
      `Кестедегі баған нені білдіреді?`, 
      `Атрибут`, 
      [
        `Жазба`,
        `Кілт`,
        `Сұраныс`,
        `Пайдаланушы`
      ],
    ),
    new Test(
      `Кестедегі жол нені білдіреді?`, 
      `Жазба`, 
      [
        `Атрибут`,
        `Кілт`,
        `Баған`,
        `Мәзір`
      ],
    ),
    new Test(
      `SQL-де деректерді көру үшін қандай команда қолданылады?`, 
      `SELECT`, 
      [
        `INSERT`,
        `DELETE`,
        `CREATE`,
        `UPDATE`
      ],
    ),
    new Test(
      `SQL-де деректерді жою үшін қандай команда қолданылады?`, 
      `DELETE`, 
      [
        `REMOVE`,
        `ERASE`,
        `TRUNCATE`,
        `CUT`
      ],
    ),
    new Test(
      `SQL-де жаңа кесте құру үшін қандай команда қолданылады?`, 
      `CREATE TABLE`, 
      [
        `NEW TABLE`,
        `MAKE TABLE`,
        `FORM TABLE`,
        `BUILD TABLE`
      ],
    ),
    new Test(
      `SQL-де деректерді қосу үшін қандай команда қолданылады?`, 
      `Деректерді жаңа жазба ретінде қосу үшін  INSERT INTO командасы қолданылады`, 
      [
        `Деректерді кестеге қосу үшін  ADD командасы пайдаланылатын болады`,
        `Жаңа деректерді қосу үшін  APPEND операциясы орындалатын тәсіл ретінде қолданылады`,
        `Кестелерді біріктіру және деректерді қосу үшін  MERGE командасы пайдаланылады`,
        `Деректерді кестеге енгізу үшін  PUT IN әдісі қолданылатын болады`
      ],
    ),
    new Test(
      `SQL-де барлық бағандар мен жолдарды көру үшін қандай жазу қолданылады?`, 
      `Барлық баған,жолды шығару үшін  SELECT * FROM table командасы қолданылады`, 
      [
        `Барлық баған мен жолдардағы мәліметтерді көру үшін  SHOW ALL командасы пайдаланылады`,
        `Барлық деректерді шығару үшін  PRINT * командасы қолданылады`,
        `Барлық жазбаларды көрсету үшін  DISPLAY командасы пайдаланылады`,
        `Барлық деректерді толық шығару үшін  SELECT FULL командасы қолданылады`
      ],
    ),
    new Test(
      `SQL-де шарт бойынша сүзу үшін не қолданылады?`, 
      `WHERE`, 
      [
        `HAVING`,
        `WHICH`,
        `CASE`,
        `SORT`
      ],
    ),
    new Test(
      `SQL-де деректерді жаңарту үшін қандай команда қолданылады?`, 
      `UPDATE`, 
      [
        `MODIFY`,
        `CHANGE`,
        `SET VALUE`,
        `REFRESH`
      ],
    ),
    new Test(
      `SQL-де кестені жою үшін қандай команда қолданылады?`, 
      `DROP TABLE`, 
      [
        `REMOVE TABLE`,
        `DELETE TABLE`,
        `ERASE TABLE`,
        `DESTROY`
      ],
    ),
    new Test(
      `SQL-де қай команда шарттан кейін қолданылады?`, 
      `WHERE`, 
      [
        `WHEN`,
        `THEN`,
        `IF`,
        `CHECK`
      ],
    ),
    new Test(
      `SQL-де баған атын өзгерту үшін не қолданылады?`, 
      `ALTER TABLE`, 
      [
        `RENAME COLUMN`,
        `CHANGE NAME`,
        `MODIFY FIELD`,
        `UPDATE STRUCTURE`
      ],
    ),
    new Test(
      `SQL сұранысында нәтижені сұрыптау үшін қандай оператор қолданылады?`, 
      `ORDER BY`, 
      [
        `SORT BY`,
        `GROUP BY`,
        `SELECT ORDER`,
        `FILTER`
      ],
    ),
    new Test(
      `SQL-де шартты тексеру үшін қандай оператор қолданылады?`, 
      `IF`, 
      [
        `CASE`,
        `ELSE`,
        `CHECK`,
        `ASSERT`
      ],
    ),
    new Test(
      `SQL сұранысында нәтижені топтау үшін не қолданылады?`, 
      `GROUP BY`, 
      [
        `ORDER BY`,
        `CLASSIFY`,
        `SORT GROUP`,
        `FILTER BY`
      ],
    ),
    new Test(
      `SQL-де қай сөз жиынтық функцияны білдіреді?`, 
      `COUNT`, 
      [
        `MEASURE`,
        `TOTAL`,
        `CALCULATE`,
        `NUMBER`
      ],
    ),
    new Test(
      `SQL-де кестеге шектеулер қою үшін қандай сөз қолданылады?`, 
      `CONSTRAINT`, 
      [
        `RESTRICT`,
        `RULE`,
        `BLOCK`,
        `LIMIT`
      ],
    ),
    new Test(
      `SQL-де бірегей мәндер үшін қандай кілт қолданылады?`, 
      `PRIMARY KEY`, 
      [
        `FOREIGN KEY`,
        `ALTERNATE KEY`,
        `UNIQUE INDEX`,
        `REFERENCE KEY`
      ],
    ),
    new Test(
      `SQL-де қай сөз барлық мәндерді қайтаруды білдіреді?`, 
      `SELECT`, 
      [
        `RETURN`,
        `SHOW`,
        `FETCH`,
        `DISPLAY`
      ],
    ),
    new Test(
      `SQL-де бір мәннің басқа кестемен байланысын көрсету үшін не қолданылады?`, 
      `FOREIGN KEY`, 
      [
        `PRIMARY FIELD`,
        `REFERENCE ID`,
        `BIND VALUE`,
        `RELATION`
      ],
    ),
    new Test(
      `SQL-де қай сөз арқылы жазбалар тізімі беріледі?`, 
      `VALUES`, 
      [
        `DATA`,
        `INSERTS`,
        `FIELDS`,
        `LIST`
      ],
    ),
    new Test(
      `SQL-де деректердің қайталанбауын қамтамасыз ететін кілт?`, 
      `UNIQUE`, 
      [
        `DISTINCT`,
        `NONREPEAT`,
        `EXCLUSIVE`,
        `KEYONLY`
      ],
    ),
    new Test(
      `SQL-де қандай оператор жазбаларды сүзеді?`, 
      `WHERE`, 
      [
        `SELECT`,
        `GROUP`,
        `ORDER`,
        `FILTER`
      ],
    ),
    new Test(
      `SQL-де жазбалар санын анықтау үшін қандай функция қолданылады?`, 
      `COUNT()`, 
      [
        `SUM()`,
        `SIZE()`,
        `TOTAL()`,
        `AMOUNT()`
      ],
    ),
    new Test(
      `SQL-де ең үлкен мәнді табу үшін қандай функция қолданылады?`, 
      `MAX()`, 
      [
        `BIG()`,
        `TOP()`,
        `UPPER()`,
        `HIGHEST()`
      ],
    ),
    new Test(
      `SQL-де ең кіші мәнді табу үшін қандай функция қолданылады?`, 
      `MIN()`, 
      [
        `LOW()`,
        `BOTTOM()`,
        `SMALLEST()`,
        `LEAST()`
      ],
    ),
    new Test(
      `SQL-де жазбалар орташа мәнін алу үшін не қолданылады?`, 
      `AVG()`, 
      [
        `MEAN()`,
        `AVERAGE()`,
        `MID()`,
        `CENTER()`
      ],
    ),
    new Test(
      `SQL-де барлық мәндердің қосындысын табу үшін қандай функция қолданылады?`, 
      `SUM()`, 
      [
        `ADD()`,
        `TOTAL()`,
        `PLUS()`,
        `COUNTALL()`
      ],
    ),
    new Test(
      `SQL сұранысында нәтижені қай бағытта сұрыптайды?`, 
      `ASC немесе DESC`, 
      [
        `UP немесе DOWN`,
        `MIN немесе MAX`,
        `HIGH немесе LOW`,
        `TOP немесе BOTTOM`
      ],
    ),
    new Test(
      `SQL-де қай оператор жаңа баған қосуға мүмкіндік береді?`, 
      `ALTER TABLE`, 
      [
        `APPEND COLUMN`,
        `ADD FIELD`,
        `INSERT COLUMN`,
        `EXTEND TABLE`
      ],
    ),
    new Test(
      `SQL-де бірнеше шарттарды біріктіру үшін не қолданылады?`, 
      `AND, OR`, 
      [
        `IF, ELSE`,
        `WHILE, FOR`,
        `CASE, WHEN`,
        `JOIN, SPLIT`
      ],
    ),
    new Test(
      `SQL-де шарт орындалмаса не болады?`, 
      `Жол қосылмайды`, 
      [
        `Кесте жойылады`,
        `Жол жаңартылады`,
        `Қате орындалады`,
        `Қайта сұралады`
      ],
    ),
    new Test(
      `SQL-де LIKE операторы не үшін қолданылады?`, 
      `Салыстыру үшін`, 
      [
        `Қосу үшін`,
        `Жою үшін`,
        `Есептеу үшін`,
        `Топтау үшін`
      ],
    ),
    new Test(
      `SQL-де BETWEEN операторы не үшін қажет?`, 
      `Белгілі бір аралықтағы мәндерді таңдау және сүзу үшін тәсіл қолданылады`, 
      [
        `Мәліметтерді қосу шарты бойынша өңдеу үшін  қосымша тәсіл пайдаланылады`,
        `Символдық мәндерді өзгерту және ауыстыру үшін  операция қолданылады`,
        `Кестеге жаңа баған қосу үшін  қосымша команда пайдаланылады`,
        `Кестелерді көшіру және жаңа құрылым жасау үшін  әдіс қолданылады`
      ],
    ),
    new Test(
      `SQL-де IN операторы не істейді?`, 
      `Берілген тізімнен іздейді`, 
      [
        `Тізімге қосады`,
        `Топпен жұмыс істейді`,
        `Екі кестені біріктіреді`,
        `Қайта сұрыптайды`
      ],
    ),
    new Test(
      `SQL-де NULL мәні нені білдіреді?`, 
      `Мән жоқ`, 
      [
        `Нөл`,
        `Бос жол`,
        `Қате`,
        `Жасырын дерек`
      ],
    ),
    new Test(
      `SQL-де NOT операторы не үшін қолданылады?`, 
      `Қайшы шартты көрсету`, 
      [
        `Сәйкестік көрсету`,
        `Түзету енгізу`,
        `Шартты қайта жазу`,
        `Сандық мән беру`
      ],
    ),
    new Test(
      `SQL-де IS NULL не үшін қажет?`, 
      `Мәннің бос немесе анықталмаған екенін тексеру үшін тәсіл қолданылады`, 
      [
        `Сан мәнінің теріс сан екенін анықтау үшін  арифметикалық тәсіл пайдаланылады`,
        `Текстік өрістің ұзындығын өлшеу үшін  функция қолданылады және есептеледі`,
        `Әртүрлі шарттарды біріктіру және өңдеу үшін  логикалық операция қолданылады`,
        `Ағымдағы уақытты көрсету және шығару үшін  уақыттық функция пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де кестені көшіру үшін не қолданылады?`, 
      `CREATE TABLE AS`, 
      [
        `COPY TABLE`,
        `CLONE TABLE`,
        `DUPLICATE`,
        `INSERT ALL`
      ],
    ),
    new Test(
      `SQL-де кесте құрылымын көру үшін не қолданылады?`, 
      `DESCRIBE`, 
      [
        `EXPLAIN`,
        `STRUCTURE`,
        `VIEW TABLE`,
        `INFO TABLE`
      ],
    ),
    new Test(
      `SQL-де DISTINCT кілтінің қызметі қандай?`, 
      `Қайталанбайтын мәндер алу`, 
      [
        `Кесте көшіру`,
        `Жол жою`,
        `Шарт енгізу`,
        `Орта мән табу`
      ],
    ),
    new Test(
      `SQL-де әрбір жол үшін бірегей идентификатор не деп аталады?`, 
      `PRIMARY KEY`, 
      [
        `UNIQUE FIELD`,
        `GLOBAL ID`,
        `FIRST KEY`,
        `RECORD ID`
      ],
    ),
    new Test(
      `SQL-де кестелер арасындағы байланыс қалай аталады?`, 
      `JOIN`, 
      [
        `LINK`,
        `CONNECT`,
        `COMBINE`,
        `INCLUDE`
      ],
    ),
    new Test(
      `SQL-де кестелерді біріктірудің негізгі түрі қайсысы?`, 
      `INNER JOIN`, 
      [
        `OUTER JOIN`,
        `FULL JOIN`,
        `CROSS JOIN`,
        `NATURAL JOIN`
      ],
    ),
    new Test(
      `SQL-де OUTER JOIN ерекшелігі неде?`, 
      `Бір кестеде бар, бірақ екінші кестеде жоқ мәндерді көрсету үшін тәсіл қолданылады`, 
      [
        `Екі кестеде тек сәйкес мәндерді ғана көрсету үшін  сәйкестік операциясы пайдаланылады`,
        `Барлық кестелердегі жолдарды толық біріктіру үшін  біріктіру тәсілі қолданылады`,
        `Кестеге жаңа бір баған қосу үшін  баған қосу операциясы орындалады`,
        `Қосымша сұранысты құру және нәтижелерді өңдеу үшін  қосымша сұраныс тәсілі пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де қандай функция жол ұзындығын есептейді?`, 
      `LENGTH()`, 
      [
        `SIZE()`,
        `COUNT()`,
        `LEN()`,
        `STRLEN()`
      ],
    ),
    new Test(
      `SQL-де қай функция мәтінді үлкен әріппен қайтарады?`, 
      `UPPER()`, 
      [
        `CAPITALIZE()`,
        `BIGTEXT()`,
        `TOUPPER()`,
        `TEXTUP()`
      ],
    ),
    new Test(
      `SQL-де LOWER() функциясы не істейді?`, 
      `Мәтіндегі барлық әріптерді кіші әріпке айналдыру үшін қолданылады`, 
      [
        `Мәтіндік жолдарды қысқарту және белгіленген ұзындыққа келтіру үшін пайдаланылады`,
        `Мәтінді бас әріппен бастап көрсету үшін қолданылады`,
        `Жолдан тек сандық мәндерді бөліп қайта шығару үшін қолданылады`,
        `Мәтіндегі барлық символдарды шифрлау және қорғау үшін орындалады`
      ],
    ),
    new Test(
      `SQL-де CONCAT() функциясы не істейді?`, 
      `Мәтіндерді біріктіреді`, 
      [
        `Жолдарды жояды`,
        `Мәндерді салыстырады`,
        `Символдарды санайды`,
        `Мәтінді шифрлайды`
      ],
    ),
    new Test(
      `SQL-де TRIM() функциясының қызметі қандай?`, 
      `Артық бос орынды жояды`, 
      [
        `Жолды қысқартады`,
        `Жолдарды салыстырады`,
        `Мәтінге символ қосады`,
        `Мәтінді өзгеріссіз қайтарады`
      ],
    ),
    new Test(
      `SQL-де NOW() функциясы не қайтарады?`, 
      `Ағымдағы күн мен уақыт мәнін қайтару үшін қолданылады`, 
      [
        `Тек бүгінгі күннің мәнін қайтару үшін пайдаланылады`,
        `Жылдың басындағы күнді қайтару үшін  жыл басын анықтау қолданылады`,
        `Айдың соңғы күнін қайтару үшін  ай соңын есептеу пайдаланылады`,
        `Сағат тілінің ағымдағы көрсеткішін шығару үшін пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де DATE() функциясы не үшін қолданылады?`, 
      `Тек күн бөлігін алу`, 
      [
        `Уақытты көрсету`,
        `Кестені көшіру`,
        `Мәтін қосу`,
        `Символ жою`
      ],
    ),
    new Test(
      `SQL-де NOW() мен CURRENT_DATE айырмашылығы неде?`, 
      `NOW функциясы ағымдағы уақытпен бірге күнді қайтарады, ал CURRENT_DATE тек күнді қайтарады`, 
      [
        `NOW және CURRENT_DATE функциялары бірдей нәтиже қайтаратын тәсіл ретінде қолданылады`,
        `NOW функциясы тек мәтін түрінде мән қайтарып, уақытты өңдемейді`,
        `CURRENT_DATE функциясы нақты уақыт мәнін емес, тек уақытсыз күнді қайтарады`,
        `NOW және CURRENT_DATE функциялары екеуі де күнсіз мәндер қайтаратын әдіс ретінде сипатталады`
      ],
    ),
    new Test(
      `SQL-де IFNULL() не үшін керек?`, 
      `Бос орынға мән беру`, 
      [
        `Қате шығару`,
        `Мәліметтерді жою`,
        `Символ ауыстыру`,
        `Баған жасыру`
      ],
    ),
    new Test(
      `SQL-де CASE операторы не үшін қолданылады?`, 
      `Бірнеше шартты тексеру және шартқа байланысты мәнді таңдау үшін пайдаланылады`, 
      [
        `Кестеге жаңа жол қосу және жазбаларды кеңейту үшін пайдаланылады`,
        `Уақыт мәнін өзгерту және жаңа уақытты орнату үшін  уақыт өзгерту үшін пайдаланылады`,
        `Мәтіндік деректерден белгілі бір символды табу үшін  іздеу үшін пайдаланылады`,
        `Кестедегі барлық деректерді өшіріп, құрылымды жою үшін  кесте жою үшін пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де DEFAULT не үшін қолданылады?`, 
      `Бастапқы мән беру`, 
      [
        `Сұранысты жаңарту`,
        `Жаңа баған қосу`,
        `Кестені босату`,
        `Ескі мәнді қайтару`
      ],
    ),
    new Test(
      `SQL-де INDEX не үшін қажет?`, 
      `Іздеуді жылдамдату`, 
      [
        `Кестені көшіру`,
        `Деректерді жою`,
        `Жазбаларды бұғаттау`,
        `Символ ауыстыру`
      ],
    ),
    new Test(
      `SQL-де AUTO_INCREMENT дегеніміз не?`, 
      `Бағандағы мәнді автоматты түрде бірлікке арттыру үшін`, 
      [
        `Кестедегі барлық деректерді өшіру және тазарту үшін`,
        `Бағандағы деректерді жаңа орынға көшіру үшін  бағанды көшіру`,
        `Мәтіндегі артық символдарды жою және тазарту үшін  символдарды жою`,
        `Мәтіндік мәндерді үлкейту және форматтау үшін  мәтінді үлкейту`
      ],
    ),
    new Test(
      `SQL-де кесте ішіндегі деректерді көшіру үшін не қолданылады?`, 
      `INSERT INTO ... SELECT`, 
      [
        `COPY FROM TO`,
        `DUPLICATE`,
        `CLONE RECORD`,
        `SAVE DATA`
      ],
    ),
    new Test(
      `SQL-де деректерді сүзудің ең жиі қолданылатын тәсілі қандай?`, 
      `WHERE арқылы`, 
      [
        `ORDER арқылы`,
        `GROUP арқылы`,
        `PRINT арқылы`,
        `FORMAT арқылы`
      ],
    ),
    new Test(
      `SQL-де мәліметтерді белгілі бір мәнмен салыстыру үшін не қолданылады?`, 
      `=, <>, >, <`, 
      [
        `IF, THEN`,
        `MATCH, EQUAL`,
        `SAME, NOT`,
        `RANGE, EXACT`
      ],
    ),
    new Test(
      `SQL-де BETWEEN x AND y не білдіреді?`, 
      `x пен y аралығындағы барлық мәндерді таңдау үшін қолданылады`, 
      [
        `Тек x немесе y мәндеріне тең болған жағдайларды таңдау үшін пайдаланылады`,
        `x пен y мәндерін қосу және нәтижесін шығару үшін қолданылады`,
        `Тек y мәнін көрсету және өңдеу үшін пайдаланылады`,
        `x пен y аралығындағы мәндерді жою және өшіру үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де мәннің нақты бір тізімге жататынын қалай тексереміз?`, 
      `IN (...)`, 
      [
        `HAS (...)`,
        `INSIDE (...)`,
        `MATCHES (...)`,
        `INLIST (...)`
      ],
    ),
    new Test(
      `SQL-де жолдың ішінде сөз іздеу үшін не қолданылады?`, 
      `LIKE '%сөз%'`, 
      [
        `FIND 'сөз'`,
        `SEARCH 'сөз'`,
        `HAS 'сөз'`,
        `MATCH 'сөз'`
      ],
    ),
    new Test(
      `SQL-де AND операторы не үшін қолданылады?`, 
      `Бірнеше шартты қосу`, 
      [
        `Шартты аяқтау`,
        `Жаңа сұраныс құру`,
        `Деректерді өшіру`,
        `Қатені көрсету`
      ],
    ),
    new Test(
      `SQL-де OR операторы қандай мән қайтарады?`, 
      `Кем дегенде бір шарт орындалған жағдайда нәтиже қайтару үшін`, 
      [
        `Барлық шарттар толық орындалған жағдайда нәтиже шығару үшін пайдаланылады`,
        `Ешбір шарт орындалмаған жағдайда нәтиже беру үшін қолданылады`,
        `Сұраныста қате пайда болған кезде нәтиже көрсету үшін пайдаланылады`,
        `Шарттар тең болмаған кезде нәтиже шығару үшін  теңсіздік операциясы қолданылады`
      ],
    ),
    new Test(
      `SQL-де NOT операторы не істейді?`, 
      `Шартты терістейді`, 
      [
        `Шартты екі еселейді`,
        `Шартты жоққа шығарады`,
        `Шартты көшірмелейді`,
        `Шартты жояды`
      ],
    ),
    new Test(
      `SQL-де әрбір жазбаны бірегей анықтайтын өріс қалай аталады?`, 
      `PRIMARY KEY`, 
      [
        `RECORD ID`,
        `MAIN FIELD`,
        `IDENTITY`,
        `AUTO FIELD`
      ],
    ),
    new Test(
      `SQL-де FOREIGN KEY не үшін қажет?`, 
      `Кестелер арасында байланыс орнату және деректер тұтастығын қамтамасыз ету тәсілі қолданылады`, 
      [
        `Кестедегі мәтіндерді сұрыптау және реттеу үшін  мәтінді сұрыптау тәсілі пайдаланылады`,
        `Кестелерге жаңа символдарды қосу үшін  символ қосу операциясы орындалады`,
        `Кестедегі сандарды өзгерту және қайта өңдеу үшін  сандарды өзгерту әдісі қолданылады`,
        `Кестеден қатарларды көшіру және сақтау үшін  қатарды көшіру тәсілі пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де кестедегі жолдар санын табу үшін не қолданылады?`, 
      `COUNT(*)`, 
      [
        `SUM(ROW)`,
        `TOTAL()`,
        `LINES()`,
        `GETROWS()`
      ],
    ),
    new Test(
      `SQL-де кесте құрылымын өзгерту үшін қай оператор пайдаланылады?`, 
      `ALTER TABLE`, 
      [
        `MODIFY TABLE`,
        `CHANGE STRUCTURE`,
        `UPDATE TABLE`,
        `TRANSFORM TABLE`
      ],
    ),
    new Test(
      `SQL-де мәліметтердің қайталанбауын қалай қамтамасыз етеміз?`, 
      `UNIQUE шектеуімен`, 
      [
        `NULL қолдану`,
        `GROUP арқылы`,
        `ORDER BY`,
        `TEXT TYPE`
      ],
    ),
    new Test(
      `SQL-де деректерді сұрыптау үшін қай оператор қажет?`, 
      `ORDER BY`, 
      [
        `FILTER BY`,
        `SELECT ALL`,
        `GROUP DATA`,
        `CHECK ORDER`
      ],
    ),
    new Test(
      `SQL-де GROUP BY не үшін қолданылады?`, 
      `Жолдарды топтау үшін`, 
      [
        `Бағандарды салыстыру үшін`,
        `Жолды өшіру үшін`,
        `Баған қосу үшін`,
        `Мәлімет шифрлау үшін`
      ],
    ),
    new Test(
      `SQL-де HAVING қандай қызмет атқарады?`, 
      `Мәліметке шарт қою`, 
      [
        `Жаңа жазба қосу`,
        `Қосымша сұраныс жасау`,
        `Топ атауын көрсету`,
        `Бағандарды жою`
      ],
    ),
    new Test(
      `SQL-де деректерді тек бір шартпен шығару үшін не керек?`, 
      `WHERE`, 
      [
        `SELECT`,
        `FILTER`,
        `ORDER`,
        `AND`
      ],
    ),
    new Test(
      `SQL-де агрегаттық функция мысалын көрсетіңіз:`, 
      `SUM()`, 
      [
        `CHAR()`,
        `PRINT()`,
        `LEN()`,
        `FIND()`
      ],
    ),
    new Test(
      `SQL сұранысында деректер түрін өзгерту үшін не қолданылады?`, 
      `CAST()`, 
      [
        `MODIFY()`,
        `CONVERT()`,
        `SET TYPE()`,
        `CHANGE()`
      ],
    ),
    new Test(
      `SQL-де жазбаларды белгілі бір шартпен жаңарту үшін не қолданылады?`, 
      `UPDATE ... WHERE`, 
      [
        `MODIFY ... IF`,
        `CHANGE ... WHEN`,
        `SET ... IF`,
        `INSERT ... CHECK`
      ],
    ),
    new Test(
      `SQL-де мәндерді бір бағанға біріктіру үшін қандай функция қолданылады?`, 
      `CONCAT()`, 
      [
        `JOIN()`,
        `MERGE()`,
        `UNION()`,
        `LINK()`
      ],
    ),
    new Test(
      `SQL-де мәннің NULL екенін қалай тексереміз?`, 
      `IS NULL`, 
      [
        `= NULL`,
        `== NULL`,
        `IS NOT DEFINED`,
        `IS NOTHING`
      ],
    ),
    new Test(
      `SQL-де мән NULL емес екенін қалай тексереміз?`, 
      `IS NOT NULL`, 
      [
        `!= NULL`,
        `IS DEFINED`,
        `IS EXIST`,
        `NOT EMPTY`
      ],
    ),
    new Test(
      `SQL-де бір кестенің ішіндегі барлық жазбаларды жою үшін не қолданылады?`, 
      `DELETE FROM table`, 
      [
        `REMOVE RECORDS`,
        `TRUNCATE DATA`,
        `DROP RECORD`,
        `ERASE`
      ],
    ),
    new Test(
      `SQL-де кестені толығымен жою үшін не қолданылады?`, 
      `DROP TABLE`, 
      [
        `DELETE TABLE`,
        `REMOVE TABLE`,
        `ERASE TABLE`,
        `CLEAR STRUCTURE`
      ],
    ),
    new Test(
      `SQL-де мәліметтер қорындағы барлық кестелерді көру үшін не қолданылады?`, 
      `SHOW TABLES`, 
      [
        `LIST ALL`,
        `VIEW STRUCTURE`,
        `TABLE INFO`,
        `DISPLAY ALL`
      ],
    ),
    new Test(
      `SQL-де тек бір бағанды көру үшін не жазылады?`, 
      `SELECT column_name FROM table`, 
      [
        `VIEW column FROM table`,
        `GET column FROM table`,
        `FETCH column FROM table`,
        `DISPLAY column FROM table`
      ],
    ),
    new Test(
      `SQL-де кестеге жаңа баған қосу үшін не қолданылады?`, 
      `ALTER TABLE ... ADD`, 
      [
        `UPDATE TABLE ... INSERT`,
        `ADD TO TABLE`,
        `EXTEND TABLE`,
        `CHANGE STRUCTURE`
      ],
    ),
    new Test(
      `SQL-де мәнді шартқа байланысты таңдау үшін не қолданылады?`, 
      `CASE`, 
      [
        `IF`,
        `SWITCH`,
        `SELECT`,
        `CHOOSE`
      ],
    ),
    new Test(
      `SQL-де LIMIT не үшін қолданылады?`, 
      `Нәтиже санын шектеу`, 
      [
        `Жолдарды біріктіру`,
        `Мәндерді сұрыптау`,
        `Уақытты көрсету`,
        `Бағанды өзгерту`
      ],
    ),
    new Test(
      `SQL-де OFFSET не үшін керек?`, 
      `Сұраныс нәтижесін белгілі бір жолдан бастап көрсету үшін  операторы қолданылады`, 
      [
        `Кестеден қажетсіз жолдарды өшіру және жою үшін  жолды өшіру операторы пайдаланылады`,
        `Сұраныстағы сүзу шарттарын өзгерту және жаңарту үшін  сүзгіні өзгерту операциясы қолданылады`,
        `Кестелерге негізгі немесе сыртқы кілттер орнату үшін  кілт қою операторы пайдаланылады`,
        `Кестедегі мәтіндік деректерді өңдеу және өзгерту үшін  мәтінді өзгерту операторы қолданылады`
      ],
    ),
    new Test(
      `SQL-де қандай функция ағымдағы пайдаланушыны қайтарады?`, 
      `CURRENT_USER`, 
      [
        `GET_USER`,
        `ACTIVE_USER`,
        `SELECT USER`,
        `SYSTEM_USER`
      ],
    ),
    new Test(
      `SQL-де CURRENT_DATE не қайтарады?`, 
      `Ағымдағы күн`, 
      [
        `Ағымдағы уақыт`,
        `Айдың бірінші күні`,
        `Ескі күн`,
        `Кестенің жасалған күні`
      ],
    ),
    new Test(
      `SQL-де DEFAULT мәнін орнату қайда қолданылады?`, 
      `Кесте құрылымында`, 
      [
        `SELECT сұранысында`,
        `ORDER BY бөлігінде`,
        `GROUP BY ішінде`,
        `WHERE шартында`
      ],
    ),
    new Test(
      `SQL-де CHECK шектеуі не үшін қажет?`, 
      `Кестеге енгізілген мәннің дұрыс және талапқа сай болуын тексеру үшін қолданылады`, 
      [
        `Кестеден белгілі бір жолдарды автоматты түрде жою үшін жолды жоюға пайдаланылады`,
        `Кестелерді толықтай көшіру және жаңа құрылым жасау үшін кесте көшіру операциясы қолданылады`,
        `Кестеде шарт қоймай деректерді қабылдау үшін шартсыз қабылдау пайдаланылады`,
        `Кестедегі бағандарды қорғау және өзгерістерден сақтау үшін бағанды қорғау қолданылады`
      ],
    ),
    new Test(
      `SQL-де PRIMARY KEY не қамтамасыз етеді?`, 
      `Кестеде бірегейлікті сақтау және бос емес мәнді міндеттеу үшін қолданылады`, 
      [
        `Кестеден бағанды автоматты түрде өшіру үшін пайдаланылады`,
        `Сұраныстарға қосымша шарт енгізу үшін шарт қосу қолданылады`,
        `Кестедегі мәндерді автоматты түрде сұрыптау және реттеу үшін сұрыптау пайдаланылады`,
        `Кестелерде символдарды теру және жазу үшін  символ теру пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де FOREIGN KEY көмегімен не істейміз?`, 
      `Кестелер арасында байланыс орнату және деректер тұтастығын сақтау үшін қолданылады`, 
      [
        `Кестеге жаңа мән қосу және деректерді толықтыру мән қосу үшін пайдаланылады`,
        `Кестеден жолды көшіру және басқа жерге сақтау, жолды көшіру үшін қолданылады`,
        `Кестедегі бағанды өзгерту және құрылымын жаңарту үшін баған өзгерту орындалады`,
        `Кестеде шарт қою және сұраныс нәтижесін шектеу үшін шарт орындау пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де дерекқор құру үшін қандай команда қолданылады?`, 
      `CREATE DATABASE`, 
      [
        `MAKE DATABASE`,
        `NEW DB`,
        `SETUP DB`,
        `INIT DATABASE`
      ],
    ),
    new Test(
      `SQL-де дерекқорды таңдау үшін не қолданылады?`, 
      `USE database_name`, 
      [
        `SELECT DATABASE`,
        `OPEN DATABASE`,
        `SET DATABASE`,
        `CHOOSE DB`
      ],
    ),
    new Test(
      `Бейнелеу формасы бойынша символдық деректер қандай түрлерге бөлінеді?`, 
      `құрылымдық етілмеген, жартылай құрылымдық етілген`, 
      [
        `логикалық, сандық, мәтіндік, мультимедиа, графикалық`,
        `құрылымдық етілген, жүйелік, құрылымдық етілмеген`,
        `жалпы, жартылай құрылымдық етілген, объектті-бағдарлы`,
        `объектті-бағдарлы, құрылымдық етілген, логикалық`
      ],
    ),
    new Test(
      `Ақпаратты сақтау бойынша деректер қорын келесі түрлерге бөлуге болады:`, 
      `құжаттық, фактографиялық, лексикографикалық`, 
      [
        `құрылымдық етілмеген, жартылай құрылымдық етілген, құрылымдық етілген`,
        `логикалық, сандық, мәтіндік, мультимедиа, графикалық`,
        `жалпы, жартылай құрылымдық етілген, объектті-бағдарлы`,
        `объектті-бағдарлы, құрылымдық етілген, логикалық`
      ],
    ),
    new Test(
      `Деректерді ұйымдастыру және сақтау бойынша деректер келесі түрлері бар:`, 
      `локальды, жалпы, таратылған, объектті-бағдарлы`, 
      [
        `құрылымдық етілмеген, жартылай құрылымдық етілген, құрылымдық етілген`,
        `логикалық, сандық, мәтіндік, мультимедиа, графикалық`,
        `жалпы, жартылай құрылымдық етілген, объектті-бағдарлы`,
        `объектті-бағдарлы, құрылымдық етілген, логикалық`
      ],
    ),
    new Test(
      `Деректер қорының жүйесі қандай қасиеттерге жауап беруі керек?`, 
      `жылдамдық, мүмкіндік, иілгіш, бүтіндік`, 
      [
        `жылдамдық, ашықтық, қарапайымдылық, бүтіндік`,
        `жылдамдық, бүтіндік, иілгіш, қарапайымдылық`,
        `бүтіндік, логикалық, мүмкіндік, жалпылық`,
        `оңайлық, түсініктілік, ашықтық`
      ],
    ),
    new Test(
      `Деректер қорын басқару жүйесі дегеніміз не?`, 
      `бағдарламалық қамтама`, 
      [
        `аппараттық қамтама`,
        `ақпараттық жүйе`,
        `компьютерлік бағдарлама`,
        `деректер қоры`
      ],
    ),
    new Test(
      `Деректердің сөздігі дегеніміз не?`, 
      `деректер туралы деректерден тұратын жүйелік деректер қоры`, 
      [
        `деректер қоры жүйесінің ұғымдарынан тұратын сөздік`,
        `кез-келген ақпараттын тұратын деректер қоры`,
        `нақты ақпараттын тұратын деректер қоры`,
        `деректер қорының ұғымдарынан тұратын жүйелік деректер қоры`
      ],
    ),
    new Test(
      `Деректер қорын құру үшін қажетті компоненттер қай бетте қосымша орналасады?`, 
      `Data Controls`, 
      [
        `Additional`,
        `InterBase`,
        `MIDAS`,
        `ADO`
      ],
    ),
    new Test(
      `Транзакция дегеніміз не?`, 
      `деректер қорымен орындалатын амалдардың тізбегі`, 
      [
        `деректерге қолданылатын кез-келген жай амал`,
        `қайталанатын бірлік амалдардың тізбегі`,
        `деректер қоры объекттеріне қолданылатын амалдардың тізбегі`,
        `деректер қорын басқару жүйесіндегі амалдардың тізбегі`
      ],
    ),
    new Test(
      `Деректердің иерархиялық моделінің маңыздығы неде?`, 
      `деректер қорының барлық деректері бір түбірден тармақталған`, 
      [
        `деректер қорының барлық деректері бір-бірімен байланысқан`,
        `деректер қорының барлық деректері кестелерде сақталады`,
        `деректердің шектелмеген төбелері болуы мүмкін`,
        `деректердің шектелген төбелері болады`
      ],
    ),
    new Test(
      `Иерархиялық деректер қоры неден тұрады?`, 
      `реттелген ағаштар терімінен`, 
      [
        `реттелген кестелерден`,
        `өзара байланысқан кестелерден`,
        `графтар түріндегі тораптардан`,
        `реттелген объекттерден`
      ],
    ),
    new Test(
      `Иерархиялық деректер қорының негізгі қағидасы қандай?`, 
      `ешқандай да бір ұрпақ атасыз болуы мүмкін емес`, 
      [
        `ешқандай да бір ата өзінің ұрпағысыз болуы мүмкін емес`,
        `ешқандай да бір ұрпақ өзінің ұрпағысыз болмауы мүмкін емес`,
        `ешқандай да бір ата атасыз болуы мүмкін емес`,
        `ешқандай да бір ата атасыз және ұрпағысыз болмауы мүмкін емес`
      ],
    ),
    new Test(
      `Деректердің иерархиялық моделінің кеңейтілген (модификацияланған) түрі болып не табылады?`, 
      `тораптық модель`, 
      [
        `реляциялық модель`,
        `постреляциялық модель`,
        `логикалық модель`,
        `физикалық модель`
      ],
    ),
    new Test(
      `Деректердің тораптық моделінің иерархиялық модельден қандай негізгі айырмашылығы бар?`, 
      `аталардың шектелмегені`, 
      [
        `ұрпақтардың шектелгені`,
        `ешқандай айырмашылығы жоқ`,
        `байланыстардың шектелмегені`,
        `аталардың шектелгені`
      ],
    ),
    new Test(
      `Тораптық деректер қоры неден тұрады?`, 
      `жазбалар және олардың арасындағы байланыстардың терімінен`, 
      [
        `деректер және олардың арасындағы байланыстардың терімінен`,
        `символдар және олардың көшірмелерінің терімінен`,
        `ағаштар және бұтақтардың терімінен`,
        `аталар және ұрпақтардың терімінен`
      ],
    ),
    new Test(
      `Деректердің иерархиялық және тораптық модельдерінің негізгі кемшілігі неде?`, 
      `қолдану күрделілігінде`, 
      [
        `қолдану шығындарында`,
        `меңгеру қиындығында`,
        `сатып алу қиындығында`,
        `ендіру қыиндығында`
      ],
    ),
    new Test(
      `Қай беттің (қосымшаның) көмегімен есеп беру құрылады:`, 
      `Qreport`, 
      [
        `Standart`,
        `Won 32`,
        `MIDAS`,
        `Data Access`
      ],
    ),
    new Test(
      `Деректер банкінің даму кезеңдерінің орындалуы бойынша ретімен орналастырыңыз: 1) толық қайта ұйымдастыру; 2) іске асыру; 3) эксплуатация; 4) модернизациялау және дамыту.`, 
      `3, 2, 4, 5, 1`, 
      [
        `3, 5, 1, 4, 2`,
        `2, 3, 4, 5, 1`,
        `2, 5, 4, 1, 3`,
        `2, 3, 1, 4, 5`
      ],
    ),
    new Test(
      `Визуалдық компонеттер үшін қандай класс базалық болып табылады:`, 
      `TControl`, 
      [
        `TWinControl`,
        `TApplication`,
        `Tcomponent`,
        `Locate`
      ],
    ),
    new Test(
      `Деректер қорының ақырғы қолданушыларының қызметтік функциялары қандай?`, 
      `деректер қорын тек қана өзінің кәсіптік қызмет шеңберінде қолдану`, 
      [
        `деректер қорының логикалық құрылымын құру`,
        `деректер қорының физикалық құрылымын құру және оны үнемі ұстау`,
        `қосымшалар, интерфейс және деректер қорымен жұмыс істеуге арналған бағдарламалар құру`,
        `деректер қорын жобалау, эксплуатациялау және қайта ұйымдастыру`
      ],
    ),
    new Test(
      `Төменде көрсетілген тұлғалардың қайсысы деректер банкінің ақырғы қолданушысы бола алады?`, 
      `фирма тұтынушылары`, 
      [
        `деректер қорын құрушылар`,
        `бағдарламалаушылар`,
        `әкімдер`,
        `кез-келген қолданушылар`
      ],
    ),
    new Test(
      `Деректер банкі әкімінің негізгі функциясы неден тұрады?`, 
      `ұйымдастыру, дұрыстықты қамтамасыз ету, қайта ұйымдастыру`, 
      [
        `қолдану, құру, қайта ұйымдастыру`,
        `эксплуатация, модификациялау, дұрыстықты қамтамасыз ету`,
        `модификация, қайта ұйымдастыру, дұрыстықты қамтамасыз ету`,
        `құру, модификациялау, дұрыстықты қамтамасыз ету`
      ],
    ),
    new Test(
      `Қосымша құрушының негізгі функциясы неден тұрады?`, 
      `деректер қорымен жұмыс істеуге нақты қосымшалар құру`, 
      [
        `деректер қорын қолдануға бағдарламалар құру`,
        `деректер қорын құру`,
        `деректер қорын құруға наұты қосымшалар құру`,
        `деректер қорын басқару жүйесін құру`
      ],
    ),
    new Test(
      `Сұраныс дегеніміз не?`, 
      `қолданушының деректерді таңдау мақсатымен деректер қорына жүгіну үрдісі`, 
      [
        `деректер қорын және оларды басқаруға қосымшалар құру үрдісі`,
        `деректер қорын басқаруға бағдарлама құру үрдісі`,
        `деректер қоры туралы мәліметтен тұратын деректер қорының негізгі компоненті`,
        `деректер банкі туралы мәліметтен тұратын деректер банкінің негізгі компоненті`
      ],
    ),
    new Test(
      `Деректер қорының схемасы нені анықтайды?`, 
      `деректер қорының құрылымы мен кестелер арасындағы байланыстарды`, 
      [
        `деректер қорының құрылымы мен құрылымдық элементтерін`,
        `деректер қорының банкіндегі құрылымды және оның негізгі құрамын`,
        `деректер қорының құрылымы мен ішкі байланыстар жүйесін`,
        `деректер қорының үлгісін және оның құрамындағы негізгі элементтерді`
      ],
    ),
    new Test(
      `Деректер қорында қолданылатын тілдерді көрсетіңіз:`, 
      `деректерді суреттеу тілі, деректерді манипуляциялау тілі, сұраныстар тілі`, 
      [
        `деректерді бейнелу тілі, деректерді анықтау тілі, сұраныстар тілі`,
        `деректерді құру тілі, деректерді қолдану тілі, деректерді бейнелеу тілі`,
        `деректерді сүреттеу тілі, деректерді қолдану тілі, деректерді бейнелеу тілі`,
        `деректерді құру тілі, деректерді қолдану тіліғ деректерді манипуляциялау тілі`
      ],
    ),
    new Test(
      `Қандай ДҚБЖ өндірістік болып табылады:`, 
      `SyBaseInterBase`, 
      [
        `DBase`,
        `Paradox`,
        `BDE`,
        `ADO`
      ],
    ),
    new Test(
      `Деректерді манипуляциялау тілі неге арналған?`, 
      `деректерді басқару үшін`, 
      [
        `деректерді анықтау үшін`,
        `деректерді құру үшін`,
        `деректерді жіберу үшін`,
        `деректерді қабылдау үшін`
      ],
    ),
    new Test(
      `Деректерді манипуляциялау тілі қалай аталады?`, 
      `DML – Data manipulation language`, 
      [
        `DDL – Data definition language`,
        `DCL – Data control language`,
        `DRL – Data relation language`,
        `SQL – Select query language`
      ],
    ),
    new Test(
      `Қандай редактор ДҚ-ға кіруді ұйымдастыру үшін арналған:`, 
      `BDE`, 
      [
        `SQLExplorer`,
        `SQLMonitor`,
        `SQLLinks`,
        `BDEAdministrator`
      ],
    ),
    new Test(
      `Сұраныстар құру тілін көрсетіңіз:`, 
      `SQL`, 
      [
        `FORTRAN`,
        `ORACLE`,
        `DDL`,
        `DML`
      ],
    ),
    new Test(
      `Деректердің моделі нені сипаттайды?`, 
      `деректердің құрамын және типтерін`, 
      [
        `деректер қорының құрылымын`,
        `деректер қорының логикалық құрылымын`,
        `деректер қорының физикалық құрылымын`,
        `деректер қорының схемасын және байланыстарын`
      ],
    ),
    new Test(
      `Деректер қорын басқару жүйесі деректердің қандай типтерін пайдаланады?`, 
      `сандық, символдық, логикалық, күн-уақыт, гиперсілтеме, OLE компоненті`, 
      [
        `сандық, мәтіндік, логикалық, кестелік, графикалық, XML компоненті`,
        `мәтіндік, кестелік, графикалық, күн-уақыт, мультимедиа, геометриялық`,
        `мәтіндік, сандық, графикалық, аналогтық, мультимедиа, геометриялық`,
        `мәтіндік, символдық, сандық, аналогтық, мультимедиа, геометриялық`
      ],
    ),
    new Test(
      `Деректердің логикалық типі қандай мәндер қабылдауы мүмкін?`, 
      `ақиқат және жалған`, 
      [
        `ақиқат, ноль, жалған`,
        `0, 1, 2`,
        `өрнекк байланысты`,
        `0 және 1 ден басқа кез келген мән`
      ],
    ),
    new Test(
      `Деректердің сандық типі қандай мәндер қабылдай алады?`, 
      `бүтін, қаржылай және рационал`, 
      [
        `бүтін`,
        `натурал`,
        `оң және теріс емес сандар`,
        `оң және теріс сандар`
      ],
    ),
    new Test(
      `Деректердің символдық типі қандай мәндер қабылдауы мүмкін?`, 
      `алфавиттік-сандық`, 
      [
        `тек символдар`,
        `тек бүтін сандар`,
        `рационал және қаржы сандары`,
        `кез-келген символ`
      ],
    ),
    new Test(
      `Деректер қорындағы сілтемеде не болуы мүмкін?`, 
      `компьютердің түрлі ресурстарына сілтеме`, 
      [
        `байланысқан кестелерге сілтеме`,
        `деректер қорының объекттеріне сілтеме`,
        `деректер қорының элементтеріне сілтеме`,
        `деректер қорын басқаруға арналған қосымшаға сілтеме`
      ],
    ),
    new Test(
      `DataBaseDesktop құралы дегеніміз не?`, 
      `кестелерді құру үшін және түзету үшін арналған программа`, 
      [
        `деректер қорының процессоры`,
        `BDE күйі үшін утилита`,
        `ДҚ проводнигі`,
        `алыстатылған деректер қорға жіберу үшін драйвер`
      ],
    ),
    new Test(
      `Деректер қорының негізгі объекті болып не табылады?`, 
      `кесте`, 
      [
        `форма`,
        `сұраныс`,
        `отчет`,
        `макрос`
      ],
    ),
    new Test(
      `Деректердің реляциялық моделі қандай ұғымға негізделген?`, 
      `қатынас`, 
      [
        `торап`,
        `иерархия`,
        `деректер`,
        `элемент`
      ],
    ),
    new Test(
      `Деректер қорында қатынас нені білдіреді?`, 
      `кортеждер жиыны`, 
      [
        `объекттер жиыны`,
        `элементтер жиыны`,
        `кестелер жиыны`,
        `байланыстар жиыны`
      ],
    ),
    new Test(
      `Қатынасты бейнелеудің ең ыңғайлы формасы қандай?`, 
      `екі өлшемді кесте`, 
      [
        `ағаштәріздес схема`,
        `торап түріндегі деректер`,
        `мәтін түріндегі деректердің жиыны`,
        `символдар жиыны түріндегі деректер`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында қатынас неден тұрады?`, 
      `кортеж және атрибуттардан`, 
      [
        `атадан және ұрпақтардан`,
        `байланысқан кестелерден`,
        `кез-келген ақпараттан`,
        `баған және кілттерден`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында қатар не деп аталады?`, 
      `кортеж`, 
      [
        `баған`,
        `атрибут`,
        `схема`,
        `өріс`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында баған не деп аталады?`, 
      `атрибут`, 
      [
        `өріс`,
        `жазба`,
        `схема`,
        `кортеж`
      ],
    ),
    new Test(
      `Төменде көрсетілгендердің қайсысы реляциялық деректер қорын басқару жүйелері болып табылады?`, 
      `Visual FoxPro, Microsoft Access, Oracle`, 
      [
        `Microsoft Word, Microsoft Excel, Microsoft Access`,
        `Microsoft FrontPage, Microsoft Access, Paint`,
        `Adobe Reader, Internet Explorer, Oracle`,
        `Visual FoxPro, Microsoft Office`
      ],
    ),
    new Test(
      `Реляциялық модель дегеніміз не?`, 
      `уақыт өтуімен өзгеріп отыратын қатынастардың терімі`, 
      [
        `уақыт өтуімен өзгеріп отыратын атрибуттар терімі`,
        `қолданушыға арналған реляциялық деректер`,
        `модельдерде қолданылатын реляциялық деректер`,
        `кез-келген деректердің терімі`
      ],
    ),
    new Test(
      `«Қатынас схемасы» ұғымы қандай мағынаны береді?`, 
      `кесте бағандарының тақырып қатары`, 
      [
        `кесте қатарларының тақырып бағаны`,
        `өзара байланысқан кестелер схемасы`,
        `кесте бағандары тақырыптарының схемасы`,
        `кесте қатарлары тақырыптарының схемасы`
      ],
    ),
    new Test(
      `Кортеж дегеніміз не?`, 
      `кесте қатары`, 
      [
        `кесте бағаны`,
        `кесте`,
        `схема`,
        `деректер`
      ],
    ),
    new Test(
      `«Маңыз» ұғымының анықтамасын таңдаңыз:`, 
      `объект қасиеттерінің сипаттамасы`, 
      [
        `қатынас байланыстарының сипаттамасы`,
        `пәндік облыстың сипаттамасы`,
        `концептуальдық модель`,
        `физикалық модель`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында «домен» ұғымы нені білдіреді?`, 
      `атрибуттың қабылдай алатын мәндер жиыны`, 
      [
        `кортеждің қабылдай алатын мәндер жиыны`,
        `қатынастың қабылдай алатын мәндер жиыны`,
        `қатынастар байланыстарының жиыны`,
        `индекстер және кілттердің жиыны`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында «алғашқы кілт» ұғымы нені білдіреді?`, 
      `бір не бірнеше атрибут`, 
      [
        `бір не бірнеше кортеж`,
        `бір не бірнеше кесте`,
        `бір не бірнеше индекс`,
        `атрибуттың бір не бірнеше мәндері`
      ],
    ),
    new Test(
      `DataSource визуалдық емес компонент дегеніміз не?`, 
      `деректер көзі, деректер көзі`, 
      [
        `ДҚ кестесіне негізделген деректер жиыны`,
        `SQL – сұранысқа негізделген деректер жиыны`,
        `ДҚ-мен біріктіру компонентасы`,
        `ДҚ-мен жұмыс істеудің ағымдық сеансын ұйымдастыру құралы`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында «индекс» ұғымы нені білдіреді?`, 
      `кестеден жазбаларды іздеу амалын жылдамдату құралы`, 
      [
        `кестенің кортеждерін байланыстыру құралы`,
        `атрибуттарды автоматты түрде толтыру құралы`,
        `деректер қорынан деректерді таңдау құралы`,
        `ақпаратты іздеуді ұйымдастыру құралы`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында кестелерді байланыстыру ненің көмегімен іске асырылады?`, 
      `байланыстың кілті арқылы`, 
      [
        `байланыстың кортежі арқылы`,
        `қатынастың байланысы арқылы`,
        `домен арқылы`,
        `жазба арқылы`
      ],
    ),
    new Test(
      `Байланыстардың қандай түрлері реляциялық деректер қорында жиі қолданылады?`, 
      `1:1, 1:М, М:1, М:М`, 
      [
        `1:1, 1:2, 2:1, 2:2`,
        `1:1, М:М`,
        `1:1:М, 1:М:1, М:1:М, М:М:1`,
        `М:М:1, 1:1:1, М:М:М`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында қатынастар арасындағы байланыстың «бірге бір» типі қашан пайда болады?`, 
      `негізгі және қосымша кестелердің барлық байланыс өрістері кілттік болғанда`, 
      [
        `негізгі және қосымша кестелердің ешқандай да бір өрісі кілттік болмағанда`,
        `тек негізгі кестенің өрістері кілттік болғанда`,
        `тек қосымша кестенің өрістері кілттік болғанда`,
        `негізгі және қосымша кестенің бір өрістен кілттік болғанда`
      ],
    ),
    new Test(
      `Байланыстың «көпке-бір» типі қашан пайда болады?`, 
      `негізгі кестенің бір жазбасына қосымша кестенің бірнеше жазбалары сәйкес келгенде`, 
      [
        `негізгі кестенің бірнеше жазбасына қосымша кестенің бір кестесі сәйкес келегенде`,
        `негізгі кестенің бір жазбасына қосымша кестенің бір жазбасы сәйкес келгенде`,
        `негізгі кестенің бірнеше жазбаларына қосымша кестенің бірнеше жазбалары сәйкес келгенде`,
        `негізгі кестенің бір жазбасына осы кестенің қалған барлық жазбалары сәйкес келгенде`
      ],
    ),
    new Test(
      `Реляциялық деректер қорында байланыстың «бірге-көп» типі қашан пайда болады?`, 
      `негізгі кестенің бірнеше жазбаларына қосымша кестенің бір жазбасы сәйкес келсе`, 
      [
        `негізгі кестенің бір жазбасына осы кестенің қалған барлық жазбалары сәйкес келгенде`,
        `негізгі кестенің бір жазбасына қосымша кестенің бір жазбасы сәйкес келгенде`,
        `негізгі кестенің бірнеше жазбасына қосымша кестенің бір кестесі сәйкес келегенде`,
        `негізгі кестенің бір жазбасына қосымша кестенің бірнеше жазбалары сәйкес келгенде`
      ],
    ),
    new Test(
      `Байланыстың «көпке-көп» байланысы қашан пайда болады?`, 
      `негізгі кестенің бірнеше жазбасына қосымша кестенің бірнеше жазбалары сәйкес келсе`, 
      [
        `негізгі кестенің бірнеше жазбасына қосымша кестенің бір кестесі сәйкес келегенде`,
        `негізгі кестенің бірнеше жазбасына қосымша кестенің бір кестесі сәйкес келегенде негізгі кестенің бір жазбасына қосымша кестенің бір жазбасы сәйкес келгенде`,
        `негізгі кестенің бір жазбасына осы кестенің қалған барлық жазбалары сәйкес келгенде`,
        `негізгі кестенің бірнеше жазбаларына қосымша кестенің бір жазбасы сәйкес келсе`
      ],
    ),
    new Test(
      `Қатынастарға біріктіру амалын қолдану үшін қандай негізгі шарт орындалуы керек?`, 
      `қатынастардың өлшемі бірдей болуы керек`, 
      [
        `қатынастардың кортеждер саны бірдей болуы керек`,
        `қатынастардың домендері бірдей болуы керек`,
        `қатынастар бір не бірнеше атрибуттардан тұруы керек`,
        `қатынастарға біріктіру амалы қолданылмайды`
      ],
    ),
    new Test(
      `Екі қатынасты біріктіру операторын таңдаңыз:`, 
      `UNION`, 
      [
        `MINUS`,
        `INTERSECT`,
        `TIMES`,
        `WHERE`
      ],
    ),
    new Test(
      `Қатынастарды алу амалының нәтижесі не болады?`, 
      `тек бірінші қатынасқа кіретін кортеждер жиыны`, 
      [
        `тек екінші қатынасқа кіретін кортеждер жиыны`,
        `екі қатынасқа да кіретін кортеждер жиыны`,
        `екі қатынасқа да кірмейтін кортеждер саны`,
        `кілттік болып табылатын кортеждер саны`
      ],
    ),
    new Test(
      `Екі қатынастың қиылысу амалының нәтижесі не болады?`, 
      `екі қатынасқа да кіретін кортеждер`, 
      [
        `тек бірінші кортежге кіретін кортеждер`,
        `тек екінші кортежге кіретін кортеждер`,
        `кілттік болатын атрибуттар`,
        `кілттік болмайтын атрибуттар`
      ],
    ),
    new Test(
      `Қатынаста таңдау амалы қандай іс-әрекет орындайды?`, 
      `қатынастан берілген логикалық шартты қанағаттандыратын кортеждерде таңдайды`, 
      [
        `қатынастан берілген логикалық шартты қанағаттандыратын атрибуттарды таңдайды`,
        `логикалық өрнектегі шартты таңдайды`,
        `қатынастан қайталанатын атрибуттарды және кортеждерді таңдайды`,
        `қатынастан қайталанбайтын атрибуттарды және кортеждерді таңдайды`
      ],
    ),
    new Test(
      `Query визуалдық емес компоненті дегеніміз:`, 
      `SQL сұранысқа негізделген деректер жиыны`, 
      [
        `ДҚ кестесіне негізделген деректер жиыны`,
        `деректер көзі, деректер көзі`,
        `ДҚ-мен біріктіру компонентасы`,
        `ДҚ-мен жұмыс істеудің ағымдық сеансын ұйымдастыру құралы`
      ],
    ),
    new Test(
      `SQL тілінде кесте құру операторының жазылу үлгісін көрсетіңіз:`, 
      `CREATE TABLE <кесте атауы>`, 
      [
        `RENAME TABLE <кесте атауы>`,
        `REMOVE TABLE <кесте атауы>`,
        `ALTER TABLE <кесте атауы>`,
        `MOVE TABLE <кесте атауы>`
      ],
    ),
    new Test(
      `CREATE TABLE операторы неге арналған?`, 
      `кесте құру үшін`, 
      [
        `кестені жою үшін`,
        `кестенің атын өзгерту үшін`,
        `кестені жылжыту үшін`,
        `кестені жаңарту үшін`
      ],
    ),
    new Test(
      `SQL тілінде кестені жою операторының жазылу үлгісін көрсетіңіз:`, 
      `DROP TABLE <кесте атауы>`, 
      [
        `CREATE TABLE <кесте атауы>`,
        `RENAME TABLE <кесте атауы>`,
        `REMOVE TABLE <кесте атауы>`,
        `ALTER TABLE <кесте атауы>`
      ],
    ),
    new Test(
      `DROP TABLE операторы неге арналған?`, 
      `кестені жою үшін`, 
      [
        `кесте құру үшін`,
        `кестенің атын өзгерту үшін`,
        `кестені жылжыту үшін`,
        `кестені жаңарту үшін`
      ],
    ),
    new Test(
      `SQL тілінде кестенің құрылымын өзгерту операторының синтаксисін көрсетіңіз:`, 
      `ALTER TABLE <кестенің аты>`, 
      [
        `DROP TABLE <кестенің аты>`,
        `CREATE TABLE <кестенің аты>`,
        `REMOVE TABLE <кестенің аты>`,
        `MOVE TABLE <кестенің аты>`
      ],
    ),
    new Test(
      `Table визуальдық емес компоненті дегеніміз:`, 
      `ДҚ кестесіне негізделген деректер жиыны`, 
      [
        `деректер көзі, деректер көзі`,
        `SQL –сұранысқа негізделген деректер жиыны`,
        `ДҚ-мен біріктіру компонентасы`,
        `ДҚ-мен жұмыс істеудің ағымдық сеансын ұйымдастыру құралы`
      ],
    ),
    new Test(
      `CREATE INDEX операторы неге арналған?`, 
      `индекс құру үшін`, 
      [
        `индексті жою үшін`,
        `кесте құру үшін`,
        `кестені жою үшін`,
        `кестені жылжыту үшін`
      ],
    ),
    new Test(
      `Қандай оператор SQL сұраныстар тілінде деректерді таңдау үшін қолданылады?`, 
      `SELECT`, 
      [
        `WHERE`,
        `FROM`,
        `ALTER`,
        `CREATE`
      ],
    ),
    new Test(
      `SELECT операторының негізгі қызметі қандай?`, 
      `деректерді таңдау`, 
      [
        `деректерді құру`,
        `деректерді жою`,
        `деректерді жылжыту`,
        `деректерді көшіру`
      ],
    ),
    new Test(
      `Қандай оператор SQL сұраныстар тілінде жазбаларды өзгертуде қолданылады?`, 
      `UPDATE`, 
      [
        `CREATE`,
        `FROM`,
        `DROP`,
        `ALTER`
      ],
    ),
    new Test(
      `SQL-дің UPDATE операторы қандай қызмет атқарады?`, 
      `жазбаларды өзгертеді`, 
      [
        `жазбаларды құрады`,
        `жазбаларды жояды`,
        `жазбаларды көшіреді`,
        `жазбаларды жылжытады`
      ],
    ),
    new Test(
      `Қандай оператор деректер қорына жазбаларды қоюға мүмкіндік береді?`, 
      `INSERT`, 
      [
        `ALTER`,
        `CREATE`,
        `TABLE`,
        `UPDATE`
      ],
    ),
    new Test(
      `SQL-дің INSERT операторының негізгі қызметі қандай?`, 
      `деректер қорына жазбаларды қою`, 
      [
        `деректер қорына жазбаларды көшіру`,
        `деректер қорына жазбаларды құру`,
        `деректер қорына жазбаларды өзгерту`,
        `деректер қорына жазбаларды көшіру құралы`
      ],
    ),
    new Test(
      `Қандай оператор деректер қорынан жазбаларды жояды?`, 
      `DELETE`, 
      [
        `CREATE`,
        `INSERT`,
        `ALTER`,
        `TABLE`
      ],
    ),
    new Test(
      `SQL-дің DELETE операторының қызметі қандай?`, 
      `деректер қорынан жазбаларды жою`, 
      [
        `деректер қорында жазба құру`,
        `деректер қорында жазбаларды жылжыту`,
        `деректер қорынан жазбаларды көшіру`,
        `деректер қорындағы жазбаларды өзгерту`
      ],
    ),
    new Test(
      `Иерархиялық модельде «жазба» ұғымы қалай аталуы мүмкін?`, 
      `сегмент`, 
      [
        `сектор`,
        `өріс`,
        `қатар`,
        `жазба`
      ],
    ),
    new Test(
      `DBGrid визуальді компоненті дегеніміз:`, 
      `кестенің экрандық көрінісі`, 
      [
        `навигациялық интерфейс`,
        `графикалық бейне`,
        `тәуелсіз қосқыш`,
        `қарапайым тізім`
      ],
    ),
    new Test(
      `Сақталынатын процедураның құру операторы, бұл:`, 
      `CREATE PROCEDURE…AS`, 
      [
        `CREATE Table`,
        `INSERT INTO`,
        `CREATE VIEW`,
        `CREATE INDEX`
      ],
    ),
    new Test(
      `Қандай мақсатпен қатынастар қалыпты формаға келтіріледі?`, 
      `деректердің артықшылығын жою`, 
      [
        `деректер арасында байланыс орнату`,
        `енгізілген өзгерістерді сақтау`,
        `деректердің бүтіндігін қамтамасыз ету`,
        `деерктердің бірлігін ұйымдастыру`
      ],
    ),
    new Test(
      `Қай уақытта В атрибуты А атрибутынан функциональды тәуелді болып саналады?`, 
      `А атрибутының әр мәніне В атрибутының тек бір мәні сәйкес келсе`, 
      [
        `А атрибутының әр мәніне В атрибутының шектелмеген мәндері сәйкес келсе`,
        `А атрибутының әр мәніне В атрибутының нольдік мәні сәйкес келсе`,
        `А атрибутының әр мәніне В атрибуты толығымен сәйкес келсе`,
        `А атрибутының әр мәніне сол атрибуттың қалған мәндері сәйкес келсе`
      ],
    ),
    new Test(
      `Екі қатынастың функциональдық тәуелділігі реляциялық деректер қорында қалай белгіленеді?`, 
      `<variant> А – В`, 
      [
        `А – В`,
        `А + В`,
        `А / В`,
        `A\B`
      ],
    ),
    new Test(
      `жазбасы реляциялық деректер қорында нені білдіреді?`, 
      `А және В қатынастары бір-бірінен функциональды тәуелді`, 
      [
        `А және В қатынастары бір-біріне функциональды байланысқан`,
        `А және В қатынастары бір-бірінен тәуелді`,
        `А және В қатынастары бірдей`,
        `А және В қатынастары пропорциональды`
      ],
    ),
    new Test(
      `А және В қатынастарының бір-бірінен функциональдық тәуелділігі реляциялық деректер қорында қалай белгіленеді?`, 
      `A <-> B`, 
      [
        `A -> B`,
        `A <- B`,
        `A => B`,
        `A <=> B`
      ],
    ),
    new Test(
      `Қалыпты формалардың ішінен мағынасы жоғын көрсетіңіз:`, 
      `нольдің қалыпты форма (0ҚФ)`, 
      [
        `бірінші қалыпты форма (1ҚФ)`,
        `екінші қалыпты форма (2ҚФ)`,
        `үшінші қалыпты форма (3ҚФ)`,
        `төртінші қалыпты форма (4ҚФ)`
      ],
    ),
    new Test(
      `Бірінші қалыпты форманың (1ҚФ) анықтамасын беріңіз:`, 
      `егер қатынастың барлық атрибуттары жай болса, ол 1ҚФ да болады`, 
      [
        `егер қатынастың барлық атрибуттары құрама болса, ол 1ҚФ да болады`,
        `егер қатынастың барлық атрибуттары бір-бірінен тәуелді болса, ол 1ҚФ да болады`,
        `егер қатынастың атрибуттары ішінде кілттер болса, ол 1ҚФ да болады`,
        `егер қатынастың атрибуттары ішінде кілттер болмаса, ол 1ҚФ да болады`
      ],
    ),
    new Test(
      `Бір қалыпты формадан келесі қалыпты формаға қандай әдіс арқылы өтіледі?`, 
      `жоғалтусыз декомпозиция`, 
      [
        `артықшылықтан арылу`,
        `аномалияларды ескеру`,
        `маңыз-байланыс`,
        `аномалиялардан арылу`
      ],
    ),
    new Test(
      `Екінші қалыпты форманың (2ҚФ) анықтамасын беріңіз:`, 
      `егер қатынас 1ҚФ болса және әрбір кілттік емес атрибут алғашқы кілтке функциональды тәуелді болса, онда қатынас 2ҚФ да болады`, 
      [
        `егер қатынас 1ҚФ болса және әрбір кілттік атрибут алғашқы кілтке функциональды тәуелді болса, онда қатынас 2ҚФ да болады`,
        `егер қатынас 1ҚФ болса және әрбір кілттік емес атрибут алғашқы кілтке функциональды тәуелді болмаса, онда қатынас 2ҚФ да болады`,
        `егер қатынас 1ҚФ болса және әрбір кілттік емес атрибут құрама кілтке тәуелді болса, онда қатынас 2ҚФ да болады`,
        `егер қатынас 1ҚФ болса және әрбір кілттік емес атрибут құрама кілтке тәуелді болмаса, онда қатынас 2ҚФ да болады`
      ],
    ),
    new Test(
      `Үшінші қалыпты форманың (3ҚФ) анықтамасын беріңіз:`, 
      `егер қатынас 2ҚФ да болса және әрбір кілттік емес атрибут алғашқы кілттен транзитивтік емес түрде тәуелді болса, онда қатынас 3ҚФ да болады`, 
      [
        `егер қатынас 2ҚФ да болса және әрбір кілттік атрибут алғашқы кілттен транзитивтік емес түрде тәуелді болса, онда қатынас 3ҚФ да болады`,
        `егер қатынас 1ҚФ да болса және әрбір кілттік емес атрибут алғашқы кілттен транзитивтік емес түрде тәуелді болса, онда қатынас 3ҚФ да болады`,
        `егер қатынас 2ҚФ да болса және әрбір кілттік емес атрибут алғашқы кілттен тәуелді болса, онда қатынас 3ҚФ да болады`,
        `егер қатынас 1ҚФ да болса және әрбір кілттік атрибут алғашқы кілттен транзитивтік түрде тәуелді болса, онда қатынас 3ҚФ да болады`
      ],
    ),
    new Test(
      `«Маңыз-байланыс» әдісі тағы қалай аталады?`, 
      `«ER-диаграммасы» әдісі`, 
      [
        `«жоғалтусыз декомпозиция» әдісі`,
        `«артықшылықтан арылу» әдісі`,
        `аномалия әдісі`,
        `«аномалиядан арылу» әдісі`
      ],
    ),
    new Test(
      `«Маңыз-байланыс» әдісінде «атрибут» ұғымы нені білдіреді?`, 
      `маңыздың қасиеті`, 
      [
        `маңыздардың байланысы`,
        `маңыздың негізі`,
        `маңыздың өзі`,
        `маңыздың кез-келген элементі`
      ],
    ),
    new Test(
      `Маңызды кілт дегеніміз не?`, 
      `сәйкестендіру үшін қолданылатын атрибуттар жиыны`, 
      [
        `маңыздың алғашқы және құрама кілттерінің толық жиынтығы`,
        `маңыздың данасын сәйкестендіретін индекстердің толық жиынтығы`,
        `деректер қорын толтыруға арналған маңыздың негізгі құрама кілті`,
        `маңыз қасиеттері арасындағы байланысты орнататын алғашқы кілт`
      ],
    ),
    new Test(
      `Деректер қорының негізгі компоненттерін көрсетіңіз:`, 
      `кесте, сұраныс, форма, есеп, макрос, модуль`, 
      [
        `кесте, схема, макрос, есеп, мәтін, диаграмма`,
        `сурет, кесте, диаграмма, есеп, фигура`,
        `есеп, нәтиже, схема, сұраныс`,
        `мәтін, кесте, слайд, есеп, форма, сұраныс`
      ],
    ),
    new Test(
      `Деректер қорын басқару жүйесінің негізгі компоненттерін атаңыз:`, 
      `аппараттық және бағдарламалық қамтама, дерек, қолданушы, процедура`, 
      [
        `дерек, қолданушы, процедура, бағдарлама, қосымша, макрос, модуль`,
        `қолданушы, әкім, процедура, бағдарлама, макрос, модуль`,
        `бағдарлама, макрос, модуль, қосымша, код, сұраныс`,
        `дерек, схема, процедура, қосымша, ақпарат, мәлімет`
      ],
    ),
    new Test(
      `Деректер қорын басқару жүйесінде деректер қандай роль атқарады?`, 
      `көпір ролін`, 
      [
        `бағдарлама ролін`,
        `процедура ролін`,
        `негіз ролін`,
        `ақпарат ролін`
      ],
    ),
    new Test(
      `Қашықтықтағы деректерді өңдеу үшін қандай архитектуралар қолданылады?`, 
      `файл-сервер және тұтынушы-сервер`, 
      [
        `файл-тұтынушы және сервер-файл`,
        `қолданушы-дерек және тұтынушы-дерек`,
        `файл-дерек және тұтынушы-дерек`,
        `дерек-тұтынушы және сервер-дерек`
      ],
    ),
    new Test(
      `Нормализацияның бірінші формасы (1NF) не талап етеді?`, 
      `Барлық атрибуттар атомар болу керек`, 
      [
        `Барлық мәндер қайталануы қажет`,
        `Екі кесте біріктірілуі қажет`,
        `Шартсыз біріктіру орындалуы қажет`,
        `Баған атауы автоматты болуы қажет`
      ],
    ),
    new Test(
      `Нормализацияның екінші формасы (2NF) не қажет етеді?`, 
      `1NF және толық функционалдық тәуелділік`, 
      [
        `Жай SELECT сұранысы қолданылуы қажет`,
        `JOIN операциясы жасалуы керек`,
        `PRIMARY KEY орнатылуы қажет`,
        `UNIQUE мәндер қолданылуы қажет`
      ],
    ),
    new Test(
      `Үшінші қалыпты формада (3NF) не болмауы тиіс?`, 
      `Транзитивті тәуелділік болмауы қажет`, 
      [
        `Екі кілт арасында байланыс болу қажет`,
        `Баған мәндері қайталануы қажет`,
        `Сыртқы кілттер болмауы қажет`,
        `Барлық мәндер бірдей болуы қажет`
      ],
    ),
    new Test(
      `ER-модельде ромб фигурасы нені білдіреді?`, 
      `Байланысты сипаттайтын диаграмма элементі ретінде қолданылады`, 
      [
        `Символдық баған атауы ретінде диаграммада бейнеленеді`,
        `Сандарды сұрыптау әдісін көрсету үшін диаграммада қолданылады`,
        `Сыртқы кілт индикаторын белгілеу үшін диаграммада пайдаланылады`,
        `Тек мәтін өрісінің мазмұнын көрсету үшін диаграммада қолданылады`
      ],
    ),
    new Test(
      `ER-диаграммадағы сызық не көрсетеді?`, 
      `Мәндер арасындағы байланысты`, 
      [
        `Мәтін өрісінің түрін көрсетеді`,
        `Баған тақырыбын көрсетеді`,
        `Сұраныс бағытын көрсетеді`,
        `Қате шыққан жағдайда қолданылады`
      ],
    ),
    new Test(
      `Сыртқы кілттің басты қызметі қандай?`, 
      `Басқа кестемен байланыс орнату`, 
      [
        `Мәтіндік мәндерді сүзу үшін`,
        `Бағанға мән енгізуді реттеу үшін`,
        `Жаңа кесте құру процесін бастау`,
        `Шартсыз мәндерді сақтау үшін`
      ],
    ),
    new Test(
      `PRIMARY KEY бір кестеде қанша рет қолданылады?`, 
      `Тек бір ғана PRIMARY KEY болады`, 
      [
        `Екі немесе одан көп болуы мүмкін`,
        `Шартқа байланысты өзгеруі мүмкін`,
        `FOREIGN KEY санына тәуелді`,
        `Барлық жолдарда бірдей болуы керек`
      ],
    ),
    new Test(
      `UNIQUE кілті не үшін қолданылады?`, 
      `Қайталанбайтын мәндерді сақтау үшін`, 
      [
        `Қайталанбайтын мәндерді сұрыптауды жеңілдету үшін`,
        `Қайталанбайтын мәндер мәтін өрісін кеңейту үшін`,
        `Шартты блоктарды орнату үшін`,
        `Бағанның типін өзгерту үшін`
      ],
    ),
    new Test(
      `Subquery дегеніміз не?`, 
      `Cұраныс ішінде орналасқан сұраныс`, 
      [
        `Сыртқы кесте атауын білдіреді`,
        `Жазбаларды көшіру тәсілі ретінде`,
        `Сұрыптау кезіндегі оператор`,
        `Мәтіндік баған мәні ретінде`
      ],
    ),
    new Test(
      `INNER JOIN қандай қызмет атқарады?`, 
      `Ортақ мәндер арқылы біріктіру`, 
      [
        `Барлық жазбаларды жояды`,
        `Символдық мәндерді ауыстырады`,
        `Бағандар ретін өзгертеді`,
        `Жолдарды топқа бөледі`
      ],
    ),
    new Test(
      `LEFT JOIN операциясы не үшін қолданылады?`, 
      `Сол жақ кестенің барлық жолдарын таңдау үшін қолданылады`, 
      [
        `Оң жақ кестенің барлық жолдарын және сол жақтың сәйкес жолдарын таңдау үшін қолданылады`,
        `Барлық кестелердегі сәйкес мәндерді біріктіру үшін қолданылады`,
        `Сұраныс нәтижесінде тек ортақ мәндерді таңдау үшін қолданылады`,
        `Екі кестенің тек толық сәйкес жолдарын біріктіру үшін қолданылады`
      ],
    ),
    new Test(
      `FULL JOIN нәтижесінде не қайтарылады?`, 
      `Екі кестенің барлық сәйкесті және сәйкессіз мәндері қайтарылады`, 
      [
        `Тек оң жақ кестенің барлық мәндері сұраныс арқылы қайтарылады`,
        `Тек екі кестенің бірдей сәйкесті жолдары нәтижеге қайтарылады`,
        `Тек бос мәндер мен сәйкессіз деректер таңдалып қайтарылады`,
        `Екі кесте арасындағы қосылу орындалмайтын нәтижелер қайтарылады`
      ],
    ),
    new Test(
      `SQL-де ANY операторы не істейді?`, 
      `Кем дегенде бір шарттың орындалуын тексеру үшін қолданылады`, 
      [
        `Барлық мәндерді бірге қосу операциясын орындау үшін қолданылады`,
        `Кестедегі деректерді сұрыптау операциясын орындау үшін қолданылады`,
        `Тек бос мәндермен байланысты шарттарды тексеру үшін қолданылады`,
        `Тек NULL мәндерін анықтау және өңдеу үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де ALL операторы не істейді?`, 
      `Барлық шарттардың орындалуын тексеру үшін қолданылады`, 
      [
        `Бірнеше мәтіндік мәндерді біріктіру үшін қолданылады`,
        `Кестедегі кілттерді қайта ауыстыру үшін қолданылатын оператор`,
        `Кестедегі жолдарды уақытша жасыру үшін қолданылады`,
        `Кестенің құрылымын толық қайта құру үшін қолданылатын команда`
      ],
    ),
    new Test(
      `IN операторының мәні қандай?`, 
      `Берілген тізімдегі мәндермен сәйкестікті тексеру үшін қолданылады`, 
      [
        `Берілген тізімдегі көрсетілген кілттерді жою үшін қолданылады`,
        `Кестедегі деректерді берілген шарттар арқылы сүзу үшін қолданылады`,
        `Кестеге қосымша жаңа бағанды қосу үшін қолданылады`,
        `Екі кестенің арасындағы байланыстарды құру үшін қолданылады`
      ],
    ),
    new Test(
      `NOT IN не үшін қолданылады?`, 
      `Көрсетілген тізімде жоқ мәндерді таңдап шығару үшін қолданылады`, 
      [
        `Барлық NULL мәндерді деректер қорынан алып тастау үшін қолданылады`,
        `WHERE шартын жою және барлық деректерді таңдау үшін қолданылады`,
        `Сұраныс нәтижесін кестеге сақтау үшін қолданылады`,
        `TEXT типіндегі деректерді басқа типке өзгерту үшін қолданылады`
      ],
    ),
    new Test(
      `EXISTS не үшін қажет?`, 
      `Сұраныс нәтижесінде деректердің бар-жоғын тексеру үшін қолданылады`, 
      [
        `Екі кестені бірге қосу операциясын орындау үшін қолданылады`,
        `Сұраныстағы тек бірінші табылған жолды қайтару үшін қолданылады`,
        `Сұраныста қолданылған WHERE шартын өшіру үшін қолданылады`,
        `Белгілі бір бағандағы мәндерді басқа бағанға көшіру үшін қолданылады`
      ],
    ),
    new Test(
      `HAVING және WHERE айырмашылығы қандай?`, 
      `HAVING топталған нәтижелерге шарт қою үшін қолданылады`, 
      [
        `WHERE тек таңбалық мәндерге шарт қою үшін қолданылады`,
        `HAVING тек сұрыпталған нәтижелерге шарт қою үшін қолданылады`,
        `WHERE тек нөлдік мәндерді тексеру үшін қолданылады`,
        `HAVING тек бос мәндерді тексеру үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де BETWEEN ... AND ... операторы не үшін?`, 
      `Берілген екі мәннің аралығын тексеру үшін қолданылады`, 
      [
        `Берілген екі санның қосындысын есептеу үшін қолданылады`,
        `Мәтіндік өрістердің ұзындығын ұлғайту үшін қолданылады`,
        `Кестедегі белгілі бір жолдарды өшіру үшін қолданылады`,
        `Екі немесе одан көп кестелерді біріктіру үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де LIKE операторы қай кезде пайдалы?`, 
      `Мәліметтерді үлгі бойынша іздеу үшін қолданылады`, 
      [
        `Мәліметтерді жаңа сұраныс жасау үшін қолданылады`,
        `Мәліметтерді кесте құрылымын көру үшін қолданылатын оператор`,
        `Мәліметтерді жолдар арасында салыстыру үшін қолданылады`,
        `Мәліметтерді мәтіндік өрістерден көшіру үшін пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де JOIN түрлерінің айырмашылығы неде?`, 
      `Әртүрлі жазбаларды біріктіру әдісін анықтау үшін қолданылады`, 
      [
        `Тек кестелер арасындағы кілттерді тексеру үшін қолданылады`,
        `Тек кестелердегі бағандарды салыстыру үшін қолданылады`,
        `Барлық жазбаларды өзгеріссіз қайтару үшін қолданылады`,
        `Барлық түрлер бірдей әрекетті орындау үшін пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де NATURAL JOIN қандай ерекшелікке ие?`, 
      `Ортақ баған атаулары бойынша автоматты түрде біріктіру орындалады`, 
      [
        `JOIN нәтижелерін белгілі бір ереже бойынша сұрыптау орындалады`,
        `Мәндерді қолмен енгізу арқылы біріктіру операциясы орындалады`,
        `Кестелерді екіге бөлу арқылы деректерді жаңарту жүзеге асырылады`,
        `Барлық жолдарды шартсыз біріктіру операциясы орындалады`
      ],
    ),
    new Test(
      `SQL-де CROSS JOIN нәтижесі қандай болады?`, 
      `Барлық мүмкін жұптардың декарт көбейтіндісі құрылады`, 
      [
        `Тек бір ғана баған мәндерінің тізімі қайтарылады`,
        `Тек жолдарды көшіру арқылы біріктіру операциясы орындалады`,
        `Тек сәйкестігі жоқ деректерді таңдап қосу жүзеге асырылады`,
        `Барлық қосылған нәтижелерге тек NULL мәндері енгізіледі`
      ],
    ),
    new Test(
      `SQL-де VIEW не үшін қолданылады?`, 
      `Күрделі сұраныстар нәтижесін сақтап көрсету үшін қолданылады`, 
      [
        `Кестелердегі барлық деректерді толық өшіру үшін қолданылады`,
        `Кестелердегі баған атауларын өзгерту үшін қолданылады`,
        `Күрделі сұраныс деңгейдегі деректерді шифрлау үшін қолданылады`,
        `Әртүрлі баған мәндерін біріктіріп шығару үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де TRIGGER қандай мақсатта қолданылады?`, 
      `Белгілі бір жағдайда автоматты әрекеттерді орындау үшін қолданылады`, 
      [
        `Белгілі бір кестенің деректерін толық көшіру үшін қолданылады`,
        `Белгілі бір жолдарды қолмен өшіру операциясын орындау үшін қолданылады`,
        `Кестелер арасында байланыс орнату үшін FOREIGN KEY қолдану мақсатында`,
        `Сұраныстарда WHERE шартын орнату үшін қолданылатын тәсіл`
      ],
    ),
    new Test(
      `SQL-де транзакция дегеніміз не?`, 
      `Бірнеше әрекетті біртұтас процесс ретінде орындау үшін қолданылады`, 
      [
        `Бірнеше SQL сұранысын диаграмма түрінде визуалдау үшін қолданылады`,
        `Бірнеше кесте бағанының мәндерін мәтін түріне түрлендіру үшін қолданылады`,
        `Кестедегі барлық жолдарды кездейсоқ тәртіпте сұрыптау үшін қолданылады`,
        `Сұраныс нәтижелерін кестеге көшіру үшін қолданылатын тәсіл`
      ],
    ),
    new Test(
      `ACID қасиетінде Consistency нені білдіреді?`, 
      `МҚ бүтіндігін сақтау`, 
      [
        `МҚ уақытша мәндерді жою`,
        `SQL сұранысын кэштеу`,
        `JOIN нәтижесін оңтайландыру`,
        `МҚ TEXT өрістерін біріктіру`
      ],
    ),
    new Test(
      `SQL-де COMMIT не үшін қолданылады?`, 
      `Транзакция нәтижелерін деректер қорында сақтау үшін қолданылады`, 
      [
        `Транзакцияда екі немесе одан көп кестелерді біріктіру үшін қолданылады`,
        `SQL кодтарының дұрыстығын тексеру үшін қолданылады`,
        `Кестедегі баған деректерін шифрлау үшін қолданылатын тәсіл`,
        `Әртүрлі кестелер арасында JOIN операциясын орындау үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де ROLLBACK не істейді?`, 
      `Кестеден соңғы орындалған транзакцияны болдырмау үшін қолданылады`, 
      [
        `Кестеден жаңа транзакцияны бастап қосу үшін қолданылады`,
        `Кестедегі барлық деректерді толық босату үшін қолданылады`,
        `Кестеге жаңа баған қосу үшін операция орындалады`,
        `Кестеден бұрын орнатылған FOREIGN KEY кілтін жою үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де SAVEPOINT қызметі қандай?`, 
      `Транзакция ішінде аралық сақтау нүктесін орнату үшін қолданылады`, 
      [
        `Кестедегі мәндерді шифрлау үшін қолданылатын тәсіл`,
        `SQL кодтарын басқа жерге көшіру үшін қолданылады`,
        `Транзакция ішінде кесте бағандарының деректерін көшіру үшін орындалады`,
        `Транзакция ішінде сұраныс нәтижелерін файлға сақтау үшін қолданылатын әдіс`
      ],
    ),
    new Test(
      `SQL-де INDEX не үшін қолданылады?`, 
      `Сұраныстарды жылдам орындауды қамтамасыз ету үшін қолданылады`, 
      [
        `Сұраныстарды кестелерді автоматты түрде толық өшіру үшін қолданылады`,
        `Сұраныстарды кестелерге жаңа жазбаларды қосу операциясын орындау үшін қолданылады`,
        `Кестелер арасында FOREIGN KEY байланысын орнату үшін қолданылады`,
        `Мәтіндегі символдарды өзгерту операциясын орындау үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де CONSTRAINT не атқарады?`, 
      `Кесте өрістеріне  шарттар орнату үшін қолданылады`, 
      [
        `Кесте өрістеріне жолдар санын шектеу үшін қолданылады`,
        `Кесте өрістеріндегі баған атауларын сұрыптау үшін қолданылады`,
        `Сұраныс құрылымын уақытша кэштеу үшін қолданылатын тәсіл`,
        `Кілттерді автоматты түрде көшіру үшін операция орындалады`
      ],
    ),
    new Test(
      `SQL-де CHECK шектеуі не үшін қажет?`, 
      `Бағанға енгізілетін мәндердің дұрыстығын тексеру үшін қолданылады`, 
      [
        `Бағандарды қайталап көшіру үшін операция орындалады`,
        `Сұрыпталған мәндерді кестеде көру үшін тәсіл қолданылады`,
        `Транзакцияны толық аяқтау процесін орындау үшін қолданылады`,
        `Бағанға әртүрлі бағандарды бірге біріктіру үшін операция қолданылады`
      ],
    ),
    new Test(
      `SQL-де DEFAULT не үшін қолданылады?`, 
      `Өріске мән енгізілмеген жағдайда бастапқы мән беру үшін қолданылады`, 
      [
        `Тек шарттармен жұмыс істеу үшін тәсіл қолданылады`,
        `Өріске мән енгізілген ORDER BY операторын қолдау үшін операция орындалады`,
        `SQL қатесін түзету үшін өңдеу әдісі пайдаланылады`,
        `Өріске мән енгізілген FOREIGN KEY арқылы байланыс орнату үшін қолданылатын тәсіл`
      ],
    ),
    new Test(
      `SQL-де NULL мән дегеніміз не?`, 
      `Белгісіз немесе  анықталмаған дерек мәні ретінде қолданылады`, 
      [
        `Белгісіз немесе нөлге тең бүтін сан ретінде дерек қорында сақталады`,
        `Бос жол ретінде мәтіндік өрісте сақталатын дерек мәні`,
        `Логикалық FALSE нәтижесі ретінде өңделетін дерек мәні`,
        `Символдар санына тең мән ретінде кестеде сақталатын дерек`
      ],
    ),
    new Test(
      `SQL-де NOT NULL шектеуі не үшін қолданылады?`, 
      `Бағанға мәннің міндетті түрде енгізілуін талап ету үшін қолданылады`, 
      [
        `Бағанға мәннің бірнеше кестелерді біріктіру үшін операция орындалады`,
        `Бағанға жаңа мәндерді кездейсоқ генерациялау үшін қолданылады`,
        `SQL логикалық шарттарын жою үшін қолданылатын әдіс`,
        `Файл жолдарын дерек қорына жазу үшін тәсіл қолданылады`
      ],
    ),
    new Test(
      `SQL-де UNIQUE шектеуі не үшін қолданылады?`, 
      `Өрістегі мәндердің қайталанбауы үшін қолданылады`, 
      [
        `Өрістегі кесте құрылымын толықтай жою үшін қолданылады`,
        `Қосымша сұраныстарды құру үшін әдіс пайдаланылады`,
        `Мәтіндік өрістерді шифрлау үшін қолданылатын тәсіл`,
        `Бағандарға шарттар орнату үшін әдіс қолданылады`
      ],
    ),
    new Test(
      `SQL-де PRIMARY KEY мен UNIQUE айырмашылығы қандай?`, 
      `PRIMARY бос мәнге рұқсат бермейді, ал UNIQUE бос мәнге рұқсат етеді`, 
      [
        `UNIQUE тек мәтін өрістеріне қолданылатын шектеу ретінде қолданылады`,
        `PRIMARY әрқашан сұрыпталған деректерді сақтау үшін қолданылады`,
        `PRIMARY тек ішкі кестелерге орнатылатын  кілт ретінде қолданылады`,
        `UNIQUE тек SELECT сұраныстарында қолданылатын ерекшелік ретінде беріледі`
      ],
    ),
    new Test(
      `SQL-де FOREIGN KEY не істейді?`, 
      `Кестедегі өрістермен автоматты байланыс орнату үшін қолданылады`, 
      [
        `Кестедегі мәндерді автоматты түрде сұрыптау үшін қолданылады`,
        `Символдық мәндерді өзгеріссіз сақтау үшін қолданылатын тәсіл`,
        `ORDER BY операторының орнына қолданылатын әдіс`,
        `SQL операторларын орындауды шектеу үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де ON DELETE CASCADE не істейді?`, 
      `Жазба жойылғанда оған тәуелді жазбаны жою`, 
      [
        `Барлық жазбаларды SELECT сұранысымен көреді`,
        `Кестені қайта құруға мүмкіндік береді`,
        `ORDER BY автоматты түрде қосылады`,
        `Бағандарды SQL-де жасырады`
      ],
    ),
    new Test(
      `SQL-де DDL командаларына не жатады?`, 
      `CREATE, ALTER, DROP және TRUNCATE командалары`, 
      [
        `INSERT, UPDATE, DELETE және TRUNCATE командалары`,
        `SELECT, WHERE, JOIN және TRUNCATE операторлары`,
        `GROUP, ORDER, HAVING және TRUNCATE операторлары`,
        `LIKE, IN, BETWEEN және TRUNCATE операторлары`
      ],
    ),
    new Test(
      `SQL-де DML командаларына не кіреді?`, 
      `INSERT, UPDATE және DELETE командалары`, 
      [
        `CREATE, DROP және ALTER командалары`,
        `JOIN, UNION және EXCEPT командалары`,
        `WHERE, GROUP және ORDER командалары`,
        `SELECT, PRINT және EXPORT командалары`
      ],
    ),
    new Test(
      `SQL-де TCL командалары не атқарады?`, 
      `Транзакцияларды басқару және олардың орындалуын бақылау үшін`, 
      [
        `Тек кестедегі бағандармен жұмыс жүргізу үшін тәсіл қолданылады`,
        `Мәндерді шифрлау операцияларын орындауға көмек көрсету үшін қолданылады`,
        `Деректерді бір кестеден екінші кестеге көшіруді жеңілдету үшін қолданылады`,
        `Баған атауларын ауыстыру және өзгерту мүмкіндігін қамтамасыз ету үшін`
      ],
    ),
    new Test(
      `SQL-де GRANT операторы не үшін керек?`, 
      `Пайдаланушыға құқықтар беру үшін`, 
      [
        `Пайдаланушыға бағандарды біріктіру үшін`,
        `Пайдаланушыға SQL кодын сақтау үшін`,
        `Пайдаланушыға тек кесте өшіру үшін`,
        `Пайдаланушыға файлдарды экспорттау үшін`
      ],
    ),
    new Test(
      `SQL-де REVOKE операторы не істейді?`, 
      `Пайдаланушыларға берілген құқықтарды алып тастау тәсілі`, 
      [
        `Белгіленген сұраныстарды орындау үшін қолданылатын тәсіл`,
        `Жаңа кестелер құру және сақтау үшін қолданылатын әдіс`,
        `Кесте бағандарын біріктіру және жаңарту үшін қолданылатын тәсіл`,
        `Белгіленген функцияларды қайта жүктеу үшін тәсіл пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де EXISTS қайда қолданылады?`, 
      `Қосымша сұраныс нәтижесі бар-жоғын тексеру`, 
      [
        `Қосымша сұраныстың баған мәндерін өзгерту`,
        `Қосымша сұраныстағы символдарды сұрыптау`,
        `Екі кесте арасында JOIN шартын орнату`,
        `Қосымша сұраныс нәтижелерін шығару`
      ],
    ),
    new Test(
      `SQL-де SELECT ... INTO ... не істейді?`, 
      `Бір кестенің дерегін басқаға көшіру үшін`, 
      [
        `Бір кестенің дерегін жаңа кестеге құру үшін`,
        `Кестенің FOREIGN KEY орнату үшін`,
        `Кесте дерегін символдарды қысқарту үшін`,
        `Бір кестенің дерегін мәтінді кодтау үшін`
      ],
    ),
    new Test(
      `SQL-де UNION операторының мақсаты қандай?`, 
      `Бірнеше сұраныс нәтижесін бірегей түрде біріктіру`, 
      [
        `Қате жазбаларды автоматты түрде жою`,
        `Кестелердегі кілттерді біріктіру үшін`,
        `Тек бір сұранысты орындау үшін`,
        `Бірнеше сұраныс нәтижелеріндегі мәндерді сұрыптау`
      ],
    ),
    new Test(
      `SQL-де EXCEPT операторы не үшін қажет?`, 
      `Бірінші сұраныс нәтижесінде бар, бірақ екіншісінде жоқ мәндерді алу үшін қолданылады`, 
      [
        `Екі сұраныстың барлық нәтижелерін біріктіру үшін тәсіл қолданылады`,
        `Әртүрлі сұраныстардағы мәндерді салыстыру үшін операция орындалады`,
        `WHERE шарттарын қолдану және сүзу үшін әдіс пайдаланылады`,
        `Бірінші сұраныс нәтижесінде жоқ, бірақ екіншісінде жоқ мәндерді алу үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де INTERSECT не қайтарады?`, 
      `Екі сұраныстың нәтижесінде ортақ кездесетін барлық мәндерді қайтарады`, 
      [
        `Екі сұраныстың нәтижесінде барлық алынған мәндерін толық қайтарады`,
        `Бір ғана бағанның ішіндегі нәтиже мәндерін қайтадан шығарады`,
        `Екі сұраныстың нәтижесінде ортақ кездесетін барлық мәндерді қайтармайды`,
        `FOREIGN KEY арқылы байланысқан бағандарды жеке қайтарады`
      ],
    ),
    new Test(
      `SQL-де қолданушы құқықтарын басқару қалай жүзеге асады?`, 
      `GRANT және REVOKE командалары арқылы`, 
      [
        `SELECT және DELETE командалары арқылы`,
        `CREATE және UPDATE операторларымен`,
        `JOIN және GROUP операторлары арқылы`,
        `FOREIGN KEY арқылы құқық орнатылады`
      ],
    ),
    new Test(
      `SQL-де кестелердің сызбасы қалай сипатталады?`, 
      `ER-диаграмма арқылы кестелердің байланысы мен құрылымы көрсетіледі`, 
      [
        `SQL кодының синтаксисін қолдану арқылы кесте құрылымы сипатталады`,
        `ER-диаграмма арқылы кестелердің байланысы мен құрылымы көрсетілмейді`,
        `Баған аттарын кестеден тыс бөлек көрсету арқылы сипаттау орындалады`,
        `JOIN және UNION операторларын қолданып байланыстарды көрсету жүзеге асырылады`
      ],
    ),
    new Test(
      `SQL-де деректердің тұтастығы неде қамтамасыз етіледі?`, 
      `PRIMARY және FOREIGN KEY көмегімен`, 
      [
        `ORDER BY және GROUP BY көмегімен`,
        `UNION және EXCEPT көмегімен`,
        `WHERE және HAVING арқылы`,
        `VIEW және INDEX көмегімен`
      ],
    ),
    new Test(
      `SQL-де транзакцияны аяқтау үшін не қолданылады?`, 
      `COMMIT арқылы сақталады`, 
      [
        `ROLLBACK арқылы сұрыпталады`,
        `GRANT арқылы сақталады`,
        `DEFAULT арқылы аяқталады`,
        `NOT NULL арқылы тексеріледі`
      ],
    ),
    new Test(
      `SQL-де транзакцияны болдырмау үшін не істейміз?`, 
      `ROLLBACK орындау`, 
      [
        `UNION ALL қолданамыз`,
        `CREATE TABLE орындау`,
        `ORDER BY өзгерту`,
        `CHECK шектеуін қою`
      ],
    ),
    new Test(
      `SQL-де транзакция ішінде аралық сақтау не аталады?`, 
      `SAVEPOINT орнату арқылы транзакция ішіндегі аралық сақтау жүзеге асырылады`, 
      [
        `DEFAULT мәнін орнату арқылы транзакция ішіндегі аралық сақтау жүзеге асырылады`,
        `SAVEPOINT орнату арқылы транзакция ішіндегі аралық сақтау жүзеге асырылмайды`,
        `VIEW арқылы сұраныс нәтижелерін аралық сақтау үшін қолдану жүзеге асырылады`,
        `FUNCTION жазу арқылы деректерді аралық өңдеу мен сақтау процесі орындалады`
      ],
    ),
    new Test(
      `SQL-де FOREIGN KEY неге тәуелді?`, 
      `FOREIGN KEY негізгі кестедегі PRIMARY KEY мәніне тәуелді болады`, 
      [
        `FOREIGN KEY тек мәтіндік TEXT өрісінің құрылымына байланысты орнатылады`,
        `FOREIGN KEY тек ORDER BY шарттары арқылы реттелетін болады`,
        `FOREIGN KEY тек GROUP BY нәтижелеріне сәйкес орнатылады`,
        `FOREIGN KEY тек VIEW құрылымында анықталатын болады`
      ],
    ),
    new Test(
      `SQL-де UNIQUE кілтті қайда қолдануға болады?`, 
      `Қайталанбайтын мәндер қажет болатын өрістерге орнату үшін қолданылады`, 
      [
        `Барлық кесте бағандарында автоматты түрде орнату үшін қолданылады`,
        `Кестелер арасындағы байланысты JOIN операторлары арқылы қолдану үшін қолданылады`,
        `Тек VIEW құрылымында ғана қолданылатын ерекшелік ретінде беріледі`,
        `Тек DEFAULT мәндерін орнату кезінде қолданылатын тәсіл ретінде қолданылады`
      ],
    ),
    new Test(
      `SQL-де PRIMARY KEY мен FOREIGN KEY байланысы қандай?`, 
      `FOREIGN басқа кестенің PRIMARY мәнін көрсетеді`, 
      [
        `PRIMARY барлық мәндерге әсер етеді`,
        `FOREIGN тек кесте атауын береді`,
        `PRIMARY тек кестенің соңында жазылады`,
        `FOREIGN мәнді автоматты жояды`
      ],
    ),
    new Test(
      `SQL-де транзакция тұтастығы қалай сақталады?`, 
      `Транзакция кезінде ACID қағидаттарын сақтау арқылы жүзеге асырылады`, 
      [
        `Транзакция кезінде DEFAULT мәнін орнату арқылы тұтастық қамтамасыз етіледі`,
        `Транзакция нәтижесінде ACID операторларын біріктіру арқылы жүзеге асырылады`,
        `Транзакция кезінде VIEW қолдану арқылы деректерді сақтау тәсілі пайдаланылады`,
        `Транзакция нәтижелерін ORDER BY арқылы реттеу арқылы тұтастық сақталады`
      ],
    ),
    new Test(
      `SQL-де кесте арасындағы байланыс түрі қандай?`, 
      `One-to-One, One-to-Many, Many-to-Many`, 
      [
        `Primary-to-Foreign, All-to-All, Local`,
        `Join-based, View-join, Merge-type`,
        `Simple-SQL, Multi-Select, Inline-Code`,
        `Inner-Left, Outer-Full, Join-Merge`
      ],
    ),
    new Test(
      `One-to-Many байланысында негізгі кестеде не болады?`, 
      `Бір негізгі жазба бірнеше байланысты жолдарға сілтеме жасайды`, 
      [
        `Әр негізгі жазба тек бір ғана мәнге байланыс орнатады`,
        `Бірнеше мәндер бірдей PRIMARY KEY кілтін бірге қолданады`,
        `Негізгі кестедегі сұрыпталған мәндер тексеру арқылы сақталады`,
        `Бір негізгі жазба бірнеше байланысты жолдарға сілтеме жасамайды`
      ],
    ),
    new Test(
      `Many-to-Many байланыс үшін не қажет?`, 
      `Қатынас орнату үшін  қосымша байланыс кестесін қолдану қажет`, 
      [
        `Екі кестені біріктіру үшін UNION ALL сұранысын пайдалану қажет болады`,
        `Кестелерді байланыстыру үшін баған атауларын қайталау тәсілі қолданылады`,
        `Байланысты орнату үшін PRIMARY KEY өрісін екі рет көрсету тәсілі пайдаланылады`,
        `Екі кестенің мәндерін VIEW арқылы біріктіру тәсілі арқылы жүзеге асыру қажет`
      ],
    ),
    new Test(
      `SQL-де кесте байланысын қандай кілтпен орнатамыз?`, 
      `FOREIGN KEY арқылы кестелер арасындағы байланыс орнатылады`, 
      [
        `GROUP BY көмегімен деректерді біріктіру арқылы байланыс жасалады`,
        `WHERE шартын пайдаланып сұрыптау және сүзу орындалады`,
        `HAVING шартын пайдаланып топталған мәндерге шарт қою жүзеге асырылады`,
        `DEFAULT арқылы өрістерге бастапқы мәндер орнату жүзеге асырылады`
      ],
    ),
    new Test(
      `SQL-де referential integrity дегеніміз не?`, 
      `Тұтастықты қамтамасыз етіп, дереккөзбен сәйкестікті орнату үшін қолданылады`, 
      [
        `Қосымша жаңа кесте құру және құрылымын анықтау үшін қолданылады`,
        `Кесте ішіндегі бағандардың ретін өзгерту үшін тәсіл пайдаланылады`,
        `Екі кестені шартсыз біріктіру үшін JOIN операциясын орындау үшін қолданылады`,
        `SQL кодындағы қателерді түзету және қайта өңдеу үшін операция орындалады`
      ],
    ),
    new Test(
      `SQL-де ON UPDATE CASCADE не істейді?`, 
      `Басты кестеде өзгеріс болса, байланысқан кестеде де автоматты түрде өзгереді`, 
      [
        `Басты кестедегі мәндерді автоматты түрде бос күйге ауыстыру үшін қолданылады`,
        `Басты кестеде өзгеріс болса, байланысқан кестеде де автоматты түрде өзгермейді`,
        `Басты кестедегі ORDER шарттарын автоматты түрде жою үшін операция орындалады`,
        `Басты кестедегі символдық мәндерді автоматты түрде ауыстыру үшін тәсіл пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де кестелерді біріктіру үшін қандай оператор қолданылады?`, 
      `Кестелерді біріктіру үшін JOIN операторлары қолданылады`, 
      [
        `Кестелерді байланыстыру үшін VIEW және INDEX операторлары пайдаланылады`,
        `Кестелер арасында шарт қою үшін UNION операторы қолданылады`,
        `Кестелермен жұмыс істеу үшін SELECT және DELETE операторлары бірге қолданылады`,
        `Кесте құру үшін CREATE TABLE командасы арқылы жүзеге асыру тәсілі қолданылады`
      ],
    ),
    new Test(
      `SQL-де ішкі сұраныс қайда орналасады?`, 
      `Негізгі сұраныс ішіндегі WHERE немесе FROM ішінде`, 
      [
        `Негізгі сұраныс ішіндегі WHERE немесе FOREIGN KEY бөлігінде`,
        `Негізгі сұраныс ішіндегі WHERE немесе ORDER BY соңында`,
        `Негізгі сұраныс ішіндегі WHERE немесе JOIN шартынан тыс`,
        `Негізгі сұраныс ішіндегі WHERE немесе DEFAULT мәндерден кейін`
      ],
    ),
    new Test(
      `SQL-де ішкі сұраныс қай уақытта орындалады?`, 
      `Ішкі сұраныс негізгі сұраныс орындалмас бұрын өңделеді`, 
      [
        `Ішкі сұраныс барлық сұраныстар орындалғаннан кейін жүзеге асырылады`,
        `Ішкі сұраныс ORDER BY операциясынан соң ғана орындалады`,
        `Ішкі сұраныс JOIN операциялары толық аяқталғаннан кейін іске асырылады`,
        `Ішкі сұраныс TRIGGER механизмі іске қосылған кезде орындалады`
      ],
    ),
    new Test(
      `SQL-де агрегаттық функциялар не үшін қолданылады?`, 
      `Жолдардан сандық нәтижелерді есептеу және шығару үшін қолданылады`, 
      [
        `Кестелерді бос күйде сақтау және деректерді тазалау үшін қолданылады`,
        `Кестелерде FOREIGN KEY шектеулерін орнату үшін тәсіл пайдаланылады`,
        `Кестелердегі мәндерді сұрыптап реттеу үшін операция орындалады`,
        `Мәтіндік символдарды басқа мәндерге ауыстыру үшін тәсіл қолданылады`
      ],
    ),
    new Test(
      `SQL-де кестелер арасындағы байланысты анықтау үшін не қажет?`, 
      `Кестелерді байланыстыру үшін кілт өрістері мен шектеулер орнатылады`, 
      [
        `Кестелердің атаулары мен баған сандары арқылы байланыс орнату тәсілі қолданылады`,
        `Кестелерді тек символдар тізімінің көмегімен байланыстыру тәсілі пайдаланылады`,
        `Кестелер арасында FOREIGN кілтсіз де байланыс орнатуға мүмкіндік беріледі`,
        `Кестелердегі жолдар саны мен сұрыптау арқылы байланыс жасау тәсілі пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де нормализация мақсаты қандай?`, 
      `Деректерді қайталанбайтын және байланысты сақтау`, 
      [
        `Деректерді қайталанбайтын және жолдарды тезірек жою`,
        `Деректерді қайталанбайтын және кестелерді автоматты түрде көшіру`,
        `Деректерді қайталанбайтын мәндерді біріктіру және шифрлау`,
        `Деректерді қайталанбайтын және кесте аттарын өзгерту`
      ],
    ),
    new Test(
      `SQL-де аномалияны жою үшін не қажет?`, 
      `Кестелердегі деректер аномалиясын жою үшін нормализациялау қажет болады`, 
      [
        `Кестелерді дұрыс сұрыптау үшін ORDER BY операторын қолдану тәсілі пайдаланылады`,
        `Кестелерден мәліметтерді оңай көру үшін VIEW құру операциясы орындалады`,
        `Кестелер арасындағы байланысты үзу үшін FOREIGN KEY шектеулерін өшіру тәсілі пайдаланылады`,
        `Кестелерден деректерді сүзу үшін тек WHERE шартын қолдану тәсілі орындалады`
      ],
    ),
    new Test(
      `SQL-де 2NF үшін қандай шарттар орындалуы тиіс?`, 
      `1NF орындалуы және толық функционалдық тәуелділік қамтамасыз етілуі тиіс`, 
      [
        `1NF орындалуы және JOIN мен GROUP BY операторларын қолдану қажет болады`,
        `1NF орындалуы және кестеде бірегей негізгі кілттің болмауы талап етіледі`,
        `1NF орындалуы және ORDER BY операторының міндетті түрде болуы талап етіледі`,
        `1NF орындалуы және кестеде DEFAULT мәндерінің міндетті болуы талап етіледі`
      ],
    ),
    new Test(
      `SQL-де 3NF үшін не болмауы керек?`, 
      `Кестеде деректерді сүзу үшін транзитивті тәуелділік болмауы тиіс`, 
      [
        `Кестеде деректерді сүзу үшін WHERE шарты мүлдем қолданылмауы тиіс`,
        `Кестеде FOREIGN KEY байланыстары мүлдем қолданылмауы қажет болады`,
        `Кестеде барлық мәндердің бірдей болуы міндетті талап ретінде қойылады`,
        `Кестеде кемінде екі бағанның болуы міндетті шарт ретінде қарастырылады`
      ],
    ),
    new Test(
      `SQL-де деректерді оңтайландыру дегеніміз не?`, 
      `Сұраныстардың тиімді әрі жылдам орындалуын қамтамасыз ету үшін қолданылады`, 
      [
        `Жаңа кестелер құру арқылы деректер құрылымын өзгерту үшін тәсіл қолданылады`,
        `Сұраныстардың тиімді әрі жылдам орындалуын қамтамасыз ету үшін қолданылмайды`,
        `Кестелермен жұмыс істеу барысында JOIN операторларын қолданбай орындау үшін пайдаланылады`,
        `Кестелерге қайталанатын мәндер қосу арқылы деректер көлемін ұлғайту үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де индекс не үшін пайдаланылады?`, 
      `Іздеу және сұрыптау операцияларын жылдамдату үшін қолданылады`, 
      [
        `Іздеу және ORDER BY операцияларын толық өшіру үшін пайдаланылады`,
        `Кестедегі символдық мәндерді қосу үшін операция қолданылатын болады`,
        `JOIN операторын толықтай ауыстыру үшін әдіс пайдаланылады`,
        `FOREIGN KEY байланыстарын жою үшін операция орындалады`
      ],
    ),
    new Test(
      `SQL-де view не береді?`, 
      `Күрделі сұраныстарды қарапайым түрде қайта ұсыну үшін қолданылады`, 
      [
        `Кестедегі баған аттарын автоматты түрде ауыстыру үшін тәсіл пайдаланылады`,
        `Сұраныстарда WHERE шартын орындау үшін операция жүзеге асырылады`,
        `JOIN нәтижелерін сақтау және қайта қолдану үшін тәсіл пайдаланылады`,
        `Символдық мәндердің көлемін үлкейту үшін өңдеу операциясы орындалады`
      ],
    ),
    new Test(
      `SQL-де транзакция кезінде қандай қасиеттер сақталуы тиіс?`, 
      `ACID — атомарлық, келісімділік, оқшаулау, тұрақтылық қасиеттері сақталуы тиіс`, 
      [
        `TEXT, INT, DATE — тек деректер типтері сипатталуы тиіс`,
        `UNION, JOIN, ORDER — тек SQL операторларын қолдану талап етіледі`,
        `GROUP, COUNT, HAVING — тек агрегаттық функцияларды пайдалану жүзеге асырылады`,
        `DEFAULT, NULL, INDEX — тек шектеулер мен қосымша қасиеттер орнатылады`
      ],
    ),
    new Test(
      `SQL-де JOIN түрлері не үшін маңызды?`, 
      `Кестелер арасындағы деректерді дұрыс әрі толық біріктіру үшін қолданылады`, 
      [
        `Кестелердегі символдық мәндерді автоматты түрде сүзу үшін тәсіл пайдаланылады`,
        `Кестелер арасында FOREIGN KEY байланыстарын орнатуды жеңілдету үшін қолданылады`,
        `Кестелердің құрылымын шифрлау және қорғау үшін әдіс қолданылады`,
        `Кестелерге WHERE шартын автоматты түрде орнату үшін тәсіл пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де деректер типтері не үшін қажет?`, 
      `Мәндердің құрылымын және рұқсат етілген әрекеттерді дұрыс анықтау үшін қолданылады`, 
      [
        `Мәндердің құрылымын және тек кесте атауларын көрсету үшін тәсіл пайдаланылады`,
        `SQL кодтарын сызбалық форматта жазу үшін әдіс қолданылатын болады`,
        `Кесте ішінде әртүрлі баған атауларын біріктіру үшін тәсіл қолданылады`,
        `Сұраныстарда WHERE шартын құрастыру үшін әдіс пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де CHAR және VARCHAR айырмашылығы неде?`, 
      `CHAR — тұрақты ұзындықты, VARCHAR — өзгермелі`, 
      [
        `VARCHAR тек бос жолдарға арналған, VARCHAR — өзгермелі`,
        `CHAR әрқашан қысқа жолды сақтайды, VARCHAR — өзгермелі`,
        `Екеуі де тек сан сақтайды, VARCHAR — өзгермелі`,
        `CHAR тек NULL мәнін сақтайды, VARCHAR — өзгермелі`
      ],
    ),
    new Test(
      `SQL-де DATE типі не үшін қолданылады?`, 
      `Күндік мәндерді сақтау үшін`, 
      [
        `Мәтін жолын пішімдеу үшін`,
        `Бағанды автоматты түрде көшіру үшін`,
        `JOIN нәтижесін сақтау үшін`,
        `FOREIGN KEY жазу үшін`
      ],
    ),
    new Test(
      `SQL-де INT типі неге қолайлы?`, 
      `Бүтін сандарды сақтау үшін`, 
      [
        `Символдарды сұрыптау үшін`,
        `FOREIGN KEY орнату үшін`,
        `Тек DATE мәнін сақтау үшін`,
        `Баған мәнін шифрлау үшін`
      ],
    ),
    new Test(
      `SQL-де TEXT типінің ерекшелігі қандай?`, 
      `Ұзын мәтіндік жолдарды сақтау және өңдеу мүмкіндігін қамтамасыз ету үшін қолданылады`, 
      [
        `Ұзын мәтіндік жолдарды сақтау және өңдеу мүмкіндігін қамтамасыз ету үшін қолданылмайды`,
        `Кестедегі сандарды автоматты түрде қосу операциясын орындау үшін қолданылады`,
        `Кестелер арасындағы JOIN мәндерін көшіру және сақтау үшін әдіс қолданылады`,
        `Сұраныстардағы ORDER шарттарын автоматты түрде өзгерту үшін тәсіл пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де DEFAULT мәні не үшін қажет?`, 
      `Мән енгізілмеген жағдайда өріске бастапқы мәнді орнату үшін қолданылады`, 
      [
        `Кестедегі FOREIGN KEY байланысын автоматты түрде ауыстыру үшін қолданылады`,
        `Баған атауларын шифрлау және қорғау үшін қолданылатын болады`,
        `GROUP BY нәтижелерін көрсету және сұрыптау үшін пайдаланылады`,
        `TEXT өрісіндегі мәтіндік мәндерді автоматты түрде өзгерту үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де NULL мәні қандай?`, 
      `NULL — белгісіз немесе бос мәнді көрсету үшін қолданылады`, 
      [
        `NULL — тек нөлдік сан ретінде сақталатын дерек түрі болып табылады`,
        `NULL — шифрланған символдарды сақтау үшін тәсіл ретінде пайдаланылады`,
        `NULL — сұрыпталған баған мәндерін белгілеу үшін қолданылады`,
        `NULL — FOREIGN KEY атауларын автоматты түрде көрсету үшін тәсіл қолданылады`
      ],
    ),
    new Test(
      `SQL-де NOT NULL шектеуі не істейді?`, 
      `Өріске міндетті түрде мән енгізілуін талап ету үшін қолданылады`, 
      [
        `Кестедегі белгілі бір бағанды автоматты түрде өшіру үшін пайдаланылады`,
        `SQL сұраныстарын көшіру және жаңарту үшін қолданылады`,
        `Кестелер арасында FOREIGN KEY байланысын орнату үшін пайдаланылады`,
        `Сұраныстарға ORDER BY шартын автоматты түрде қосу үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де деректердің дұрыстығын не қамтамасыз етеді?`, 
      `CHECK, UNIQUE, PRIMARY және FOREIGN шектеулері`, 
      [
        `ORDER, WHERE, GROUP операторлары және FOREIGN шектеулері`,
        `VIEW, JOIN, SELECT сұраныстары және FOREIGN шектеулері`,
        `TABLE, TEXT, INDEX параметрлері және FOREIGN шектеулері`,
        `TRIGGER, DELETE, INSERT операторлары және FOREIGN шектеулері`
      ],
    ),
    new Test(
      `SQL-де деректер базасын басқару жүйесі дегеніміз не?`, 
      `Мәліметтер қорын құру, сақтау және басқаруға арналған жүйе`, 
      [
        `Бағдарламалау тілінің бір түрі және басқаруға арналған жүйе`,
        `Тек веб парақтар жасауға арналған және басқаруға арналған жүйе`,
        `Сурет өңдеу құралы және басқаруға арналған жүйе`,
        `Кесте пішімдеу редакторы және басқаруға арналған жүйе`
      ],
    ),
    new Test(
      `SQL-де JOIN операциясы не үшін қолданылады?`, 
      `Кестелерді баған мәндері бойынша біріктіру және байланыстыру үшін қолданылады`, 
      [
        `Сұраныстар нәтижелерін шифрлау және қорғау үшін пайдаланылады`,
        `Мәтін жолдарын автоматты түрде өзгерту және қайта сақтау үшін қолданылады`,
        `ORDER BY арқылы сұраныс нәтижелерін жою үшін  операция орындалады`,
        `UNION нәтижелерін тексеру және салыстыру үшін  тәсіл пайдаланылады`
      ],
    ),
    new Test(
      `SQL-де ішкі сұраныс не береді?`, 
      `Басқа сұраныста қолданылатын уақытша нәтиже алу үшін қолданылады`, 
      [
        `Кестелер арасында FOREIGN KEY орнату алгоритмін орындау үшін қолданылады`,
        `ORDER BY өрістерін жою және сұрыптауды өзгерту үшін қолданылады`,
        `Кестелерде TRIGGER іске қосу әдісін ұйымдастыру үшін  тәсіл қолданылады`,
        `Баған мәндерін кездейсоқ шығару және өңдеу үшін  операция қолданылады`
      ],
    ),
    new Test(
      `SQL-де CASE операторын қолдану мақсаты қандай?`, 
      `Шарттарға әртүрлі мәндерді таңдау және көрсету үшін қолданылады`, 
      [
        `Баған атауларын автоматты түрде жасыру және өңдеу үшін  қолданылады`,
        `Мәтіндік TEXT мәндерін шифрлау және сақтау үшін  қолданылады`,
        `ORDER BY нәтижелерін біріктіру және сұрыптау үшін қолданылады`,
        `Жаңа кестелерді жасау және құрылымын анықтау үшін қолданылады`
      ],
    ),
    new Test(
      `SQL-де агрегаттық функциялардың мысалдары қандай?`, 
      `SUM, AVG, COUNT, MIN, MAX`, 
      [
        `IF, ELSE, CASE, SWITCH`,
        `TEXT, INT, DATE, BOOL`,
        `JOIN, UNION, INTERSECT, EXCEPT`,
        `TRIGGER, VIEW, PROCEDURE, FUNCTION`
      ],
    ),
    new Test(
      `SQL-де кестені жою үшін қандай команда қолданылады?`, 
      `DROP TABLE командасы`, 
      [
        `DELETE FROM ALL`,
        `REMOVE TABLE NOW`,
        `CLEAR TABLE FAST`,
        `ERASE STRUCTURE`
      ],
    ),
    new Test(
      `SQL-де уақыт мәнін алу үшін қандай функция қолданылады?`, 
      `Уақыт мәнін алу үшін CURRENT_TIMESTAMP немесе NOW() функциялары қолданылады`, 
      [
        `Уақыт мәнін алу үшін GET_TIME_NOW()  пайдаланылатын функция қолданылады`,
        `Уақыт мәнін шығару үшін DATE() немесе DATE_NOW операторлары пайдаланылады`,
        `Уақыт мәнін көру үшін  SHOW TIME командасы қолданылады`,
        `Уақыт мәнін сұрыптау үшін  FETCH CURRENT әдісі қолданылады`
      ],
    ),
    new Test(
      `SQL-де топталған деректерге шарт қолдану үшін не пайдаланылады?`, 
      `HAVING операторы`, 
      [
        `GROUP BY операторлары`,
        `ORDER BY шектеуі`,
        `UNION шарттары`,
        `VIEW шарттары`
      ],
    ),
    new Test(
      `SQL-де кестедегі мәнді өзгерту үшін не қолданылады?`, 
      `Кестедегі мәндерді өзгерту үшін  UPDATE операторы қолданылады`, 
      [
        `Кесте бағандарын өзгерту үшін  ALTER COLUMN операторы пайдаланылады`,
        `Кестедегі дерек мәндерін өзгерту үшін  MODIFY VALUE әдісі қолданылады`,
        `Кесте құрылымын өзгерту үшін  SET STRUCTURE операциясы орындалады`,
        `Кестедегі өріс атауын өзгерту үшін  RENAME FIELD операторы қолданылады`
      ],
    ),
    new Test(
      `SQL-де жаңа кесте жасау үшін не қажет?`, 
      `Жаңа кесте құру үшін CREATE TABLE командасы қолданылады`, 
      [
        `Жаңа кесте құру үшін MAKE NEW TABLE командасы пайдаланылады`,
        `Жаңа жазбаларды қосу үшін INSERT INTO командасы қолданылады`,
        `Жаңа кесте сипаттау үшін DECLARE TABLE әдісі пайдаланылады`,
        `Кесте құрылымын орнату үшін SETUP STRUCTURE тәсілі қолданылады`
      ],
    ),
    new Test(
      `SQL-де жазбаны жою үшін қандай команда қолданылады?`, 
      `Кестеден жазбаны жою үшін DELETE FROM командасы пайдаланылады`, 
      [
        `Кестеден жазбаны өшіру үшін REMOVE RECORD командасы пайдаланылады`,
        `Кестеден деректерді жою үшін DROP FROM кесте тәсілі қолданылады`,
        `Кестеден жолдарды өшіру үшін ERASE ROW әдісі пайдаланылады`,
        `Кестедегі жазбаларды тазарту үшін CLEAR ENTRY командасы қолданылады`
      ],
    ),
  ];

export default tests;